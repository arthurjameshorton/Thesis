%!PS-Adobe-3.1 EPSF-3.0%%Title: rpp_icru49_cu_col.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Don Groom%%CreationDate: 8/5/13%%BoundingBox: 0 0 477 316%%HiResBoundingBox: 0 0 476.4581 315.8262%%CropBox: 0 0 476.4581 315.8262%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: font Symbol%%+ font Times-Italic%%+ font Times-Roman%%+ font NewCenturySchlbk-Roman%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_AGM_Gradient_Sep (1.0 0)%%+ procset Adobe_AGM_Gradient (1.1 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: Symbol%%+ Times-Italic%%+ Times-Roman%%+ NewCenturySchlbk-Roman%%DocumentNeededFonts: Symbol%%+ Times-Italic%%+ Times-Roman%%+ NewCenturySchlbk-Roman%%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Gradient 1.1 0%%Version: 1.1 0%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Gradient 190 dict dup begin put/AGMGrad_&image nd/AGMGrad_&colorimage nd/AGMGrad_&fill nd/AGMGrad_subSampleOK nd/AGMGrad_d255 nd/AGMGrad_sSave nd/AGMGrad_dUserSpace nd/AGMGrad_bUMatrix nd/AGMGrad_imageMatrix nd/AGMGrad_saveMatrix nd/AGMGrad_gMatrix nd/AGMGrad_tmpMat nd/AGMGrad_currentcolorspace nd/AGMGrad_bbox nd/AGMGrad_usingShells nd/AGMGrad_byte nd/AGMGrad_blackTmp nd/AGMGrad_yellowTmp nd/AGMGrad_magentaTmp nd/AGMGrad_cyanTmp nd/AGMGrad_cnt nd/AGMGrad_usingSmoothShade nd/AGMGrad_index nd/AGMGrad_rampFuncsArray nd/AGMGrad_boundsArray nd/AGMGrad_encodeArray nd/AGMGrad_beginCoord nd/AGMGrad_colorSpace nd/AGMGrad_firstFill nd/AGMGrad_lastFill nd/AGMGrad_size nd/AGMGrad_rampLen nd/AGMGrad_invert nd/AGMGrad_endCoord nd/AGMGrad_s nd/AGMGrad_j nd/AGMGrad_i nd/AGMGrad_tintNdx nd/AGMGrad_cmpNdx nd/AGMGrad_nColorSpace nd/AGMGrad_C0 nd/AGMGrad_C0_Space nd/AGMGrad_C1 nd/AGMGrad_C1_Space nd/AGMGrad_rampColorSpace nd/AGMGrad_bUMatrix nd/AGMGrad_channels nd/AGMGrad_len nd/AGMGrad_currenttint nd/AGMGrad_currentcolorant nd/AGMGrad_cmpIndx nd/AGMGrad_ndx nd/AGMGrad_rampIndex nd/AGMGrad_firstShell nd/AGMGrad_ramp nd/AGMGrad_rampDict nd/AGMGrad_endPoint nd/AGMGrad_rampPoint nd/AGMGrad_midPoint nd/AGMGrad_colorRamp nd/AGMGrad_nSamples nd/AGMGrad_sInc nd/AGMGrad_bInc nd/AGMGrad_nSubSamples nd/AGMGrad_optimize nd/AGMGrad_nRadSamples nd/AGMGrad_uRampLen nd/AGMGrad_pChange nd/AGMGrad_xBCInc nd/AGMGrad_yBCInc nd/AGMGrad_nColorsBd nd/AGMGrad_gradType nd/AGMGrad_gradName nd/AGMGrad_renderFlag nd/AGMGrad_retainPath nd/AGMGrad_enabledSmoothShade nd/AGMGrad_rampData nd/AGMGrad_nRamps nd/AGMGrad_xHi nd/AGMGrad_yHi nd/AGMGrad_radHilite nd/AGMGrad_gradNames nd		/AGMGrad_tint nd/AGMGrad_tint_min nd/AGMGrad_tint_max nd/AGMGrad_range nd/doc_setup{	Adobe_AGM_Core begin	Adobe_AGM_Gradient begin	initializeVars		level2{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeShading	/image where{		/image get /AGMGrad_&image xp	}if	/colorimage where{		/colorimage get /AGMGrad_&colorimage xp	}if	currentdict /AGMGrad_&fill get type /nulltype eq		{		/AGMGrad_&fill /fill load def		}if	end	end}def/doc_trailer{	currentdict Adobe_AGM_Gradient eq{		end	}if}def /page_setup{	Adobe_AGM_Gradient begin	/AGMGrad_subSampleOK 		AGMCORE_deviceDPI AGMGrad_dpiThreshold le 		currentScreenFreq AGMGrad_screenFreqThreshold le and 		AGMGrad_contoneDevice not and 	def	initializeRectFill	AGMCORE_producing_seps{		initializeSep	}{		initializeComposite	}ifelse	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	end}def/page_trailer{}def/initializeVars{	/AGMGrad_d255 256 array def	0 1 255{		AGMGrad_d255 exch dup 255 div put	}bind for	/AGMGrad_sSave nd	/AGMGrad_dUserSpace matrix defaultmatrix def	/AGMGrad_bUMatrix matrix def	/AGMGrad_imageMatrix matrix def	/AGMGrad_saveMatrix matrix def	/AGMGrad_gMatrix matrix def	/AGMGrad_tmpMat matrix def	/AGMGrad_currentcolorspace nd	/AGMGrad_bbox 4 array def	/AGMGrad_black (/AGM_Black) def}def/queryDevice{	/AGMGrad_PathsOnly false ndf	/AGMGrad_useShells false ndf	/AGMGrad_usingShells AGMGrad_useShells pt	/AGMGrad_useSmoothShade true ndf	/AGMGrad_dpiThreshold 600 ndf	/AGMGrad_screenFreqThreshold 150 ndf	/AGMGrad_contoneDevice false ndf}def/initializeRectFill{	/rectfill where dup{		exch pop not AGMCORE_producing_seps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/AGMGrad_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/AGMGrad_blackTmp xp			/AGMGrad_yellowTmp xp			/AGMGrad_magentaTmp xp			/AGMGrad_cyanTmp xp			/AGMGrad_cnt 0 pt						[			AGMGrad_byte dup 0			AGMGrad_cyanTmp 				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .3 /mul cvx			AGMGrad_magentaTmp				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .59 /mul cvx			AGMGrad_yellowTmp				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .11 /mul cvx			AGMGrad_blackTmp 				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/AGMGrad_cnt dup cvx 1 /add cvx /pt cvx			] cvx bind						AGMGrad_&image		}def	}ifelse		/setcolor nd	/currentcolor nd		/setcolorspace	{		0 get /AGMGrad_currentcolorspace xp		AGMGrad_currentcolorspace /DeviceCMYK eq{			/setcolor {setcmykcolor} bind pt			/currentcolor {currentcmykcolor} bind pt		}{			AGMGrad_currentcolorspace /DeviceGray eq{				/setcolor {setgray} bind pt				/currentcolor {currentgray} bind pt			}{				AGMGrad_currentcolorspace /DeviceRGB eq{					/setcolor {setrgbcolor} bind pt					/currentcolor {currentrgbcolor} bind pt				}if			}ifelse		}ifelse	}def	/currentcolorspace	{		[ AGMGrad_currentcolorspace ]	}def	/dictImage	{		pop		currentcolorspace 0 get /DeviceGray eq {			aload pop			AGMGrad_&image		}{			dup length /AGMGrad_tmp xp			aload pop true AGMGrad_tmp			colorimage		}ifelse	}def}def/initializeLev2{	/dictImage	{		10 dict begin			/Decode xdf			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			DataSource type /arraytype eq{				/MultipleDataSources true def			}if			currentdict		end		AGMGrad_&image	}def}def/initializeShading{	AGMGrad_useSmoothShade level3 and{		/AGMGrad_usingSmoothShade true pt		initializeLev3_Ops	}{		/AGMGrad_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/AGMGrad_index AGMGrad_gradType 0 eq {0}{AGMGrad_maxRampIndex} ifelse pt		/AGMGrad_rampFuncsArray AGMGrad_nRamps array pt		/AGMGrad_boundsArray AGMGrad_nRamps 1 sub array pt		/AGMGrad_encodeArray AGMGrad_nRamps 2 mul array pt		/AGMGrad_beginCoord AGMGrad_rampPoint pt		/AGMGrad_colorSpace null pt		/AGMGrad_firstFill AGMGrad_rampIndex AGMGrad_maxRampIndex eq pt		/AGMGrad_lastFill false pt	}def	/linealShFill{		popRampSpace		AGMGrad_gMatrix pushRampSpace				/AGMGrad_size AGMGrad_index 1 add pt		AGMGrad_size AGMGrad_nRamps lt {			/AGMGrad_rampFuncsArray AGMGrad_rampFuncsArray 0 AGMGrad_size getinterval pt			/AGMGrad_boundsArray AGMGrad_boundsArray 0 AGMGrad_size 1 sub getinterval pt			/AGMGrad_encodeArray AGMGrad_encodeArray 0 AGMGrad_size 2 mul getinterval pt		}if				/AGMGrad_rampLen AGMGrad_endCoord AGMGrad_beginCoord sub pt		bdict			/ShadingType 2			/ColorSpace AGMGrad_colorSpace			/Function 				bdict					/FunctionType 3					/Domain [0 1]					/Functions AGMGrad_rampFuncsArray					/Bounds AGMGrad_boundsArray					/Encode AGMGrad_encodeArray				edict				AGMGrad_nRamps 1 gt{					dup begin					/Bounds [ Bounds {AGMGrad_beginCoord sub AGMGrad_rampLen div} forall] def					end				}if			/Extend [AGMGrad_firstFill AGMGrad_lastFill]			/Domain [0 1] 			/Coords [AGMGrad_beginCoord 0 AGMGrad_endCoord 0]		edict		shfill	}def		/radialShFill{		/AGMGrad_size AGMGrad_nRamps AGMGrad_index sub pt		AGMGrad_size AGMGrad_nRamps lt {			/AGMGrad_rampFuncsArray AGMGrad_rampFuncsArray AGMGrad_index AGMGrad_size getinterval pt			/AGMGrad_boundsArray AGMGrad_boundsArray AGMGrad_index AGMGrad_size 1 sub getinterval pt			/AGMGrad_encodeArray AGMGrad_encodeArray AGMGrad_index 2 mul AGMGrad_size 2 mul getinterval pt		}if				/AGMGrad_rampLen AGMGrad_beginCoord AGMGrad_endCoord sub pt		bdict			/ShadingType 3			/ColorSpace AGMGrad_colorSpace			/Function 				bdict					/FunctionType 3					/Domain [0 1]					/Functions AGMGrad_rampFuncsArray					/Bounds AGMGrad_boundsArray					/Encode AGMGrad_encodeArray				edict				AGMGrad_nRamps 1 gt{					dup begin					/Bounds [ Bounds {AGMGrad_endCoord sub AGMGrad_rampLen div} forall] def					end				}if			/Extend [AGMGrad_lastFill				systemdict/setdistillerparams known AGMCORE_distilling not and				{				AGMGrad_firstFill				}{				false				}ifelse				]			/Domain [0 1] 			/Coords [AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul AGMGrad_endCoord 0 0 AGMGrad_beginCoord] 		edict		shfill				AGMGrad_radHilite{			AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul translate		}if	}def		/sampFunc{		/AGMGrad_tmp exch pt		bdict			/FunctionType 0			/Order 1			/Size [AGMGrad_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource AGMGrad_tmp			/Range [0 1]		edict	}def		/fillRamp{				/AGMGrad_invert AGMGrad_midPoint 0.5 lt pt		AGMGrad_rampIndex AGMGrad_maxRampIndex eq {			initShFill		}if				getRampColorSpace				AGMGrad_colorSpace null eq{			/AGMGrad_colorSpace AGMGrad_rampColorSpace pt		}{			AGMGrad_colorSpace AGMGrad_rampColorSpace ne {				/AGMGrad_index AGMGrad_index 1 				AGMGrad_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/AGMGrad_colorSpace AGMGrad_rampColorSpace pt			} if		}ifelse		/AGMGrad_endCoord AGMGrad_endPoint pt					Interpolation{			false		}{			SpotColor{				false			}{				AGMCORE_is_cmyk_sep			}ifelse		}ifelse				{ 			AGMCORE_composite_job{											/AGMGrad_s NumSamples NumComponents mul string def				/AGMGrad_j 0 pt				0 1 NumSamples 1 sub {					/AGMGrad_i exch pt					0 1 NumComponents 1 sub {						Ramp exch get AGMGrad_i get AGMGrad_s AGMGrad_j 3 -1 roll put 						/AGMGrad_j AGMGrad_j 1 add pt					}for				}for								AGMGrad_rampFuncsArray AGMGrad_index				bdict					/FunctionType 0					/Order 1					/Size [NumSamples]					/Domain [0 1]					/BitsPerSample 8					/DataSource AGMGrad_s					/Range [NumComponents {0 1} repeat]				edict				put			}{				AGMGrad_rampFuncsArray AGMGrad_index					AGMCORE_cyan_plate{						Ramp 0 get					}if					AGMCORE_magenta_plate{						Ramp 1 get					}if					AGMCORE_yellow_plate{						Ramp 2 get					}if					AGMCORE_black_plate{						Ramp 3 get					}if					sampFunc					dup begin /Decode [1 0] def end				put			}ifelse			/AGMGrad_invert false pt		}{						AGMGrad_rampFuncsArray AGMGrad_index				bdict					/FunctionType 2					/Domain [0 1]					/N 0.5 log AGMGrad_invert{1 AGMGrad_midPoint sub}{AGMGrad_midPoint}ifelse log div					AGMGrad_gradType 0 eq{						AGMGrad_invert{/C1}{/C0}ifelse AGMGrad_C0						AGMGrad_invert{/C0}{/C1}ifelse AGMGrad_C1					}{						AGMGrad_invert{/C0}{/C1}ifelse AGMGrad_C1						AGMGrad_invert{/C1}{/C0}ifelse AGMGrad_C0					}ifelse				edict			put		}ifelse				AGMGrad_rampIndex 0 ne{			AGMGrad_boundsArray AGMGrad_index AGMGrad_gradType 1 eq{1 sub}if AGMGrad_endCoord put		} if				0 1 AGMGrad_invert {exch}if		AGMGrad_encodeArray AGMGrad_index 2 mul 1 add 3 -1 roll put		AGMGrad_encodeArray AGMGrad_index 2 mul 3 -1 roll put		AGMGrad_rampIndex 0 eq {			/AGMGrad_lastFill true pt			AGMGrad_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/AGMGrad_index AGMGrad_index 1 		AGMGrad_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	AGMGrad_PathsOnly not level2 not and{		/linealFill{			8 setImageParms			AGMGrad_colorRamp{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 AGMGrad_&colorimage			}{				currentgray makeByte8 AGMGrad_&image 			}ifelse		}def	}if	level3{		/getRampColorSpace{			SpotColor{						[					NumTintComponents 2 eq					{						/DeviceN 							[							Colorants 0 get							substituteBlack							Colorants 1 get							substituteBlack							] 					}{						/Separation						Colorants 0 get						substituteBlack					}ifelse					CSA map_csa 					[						/AGMGrad_range NumTintComponents 2 eq {1} {0} ifelse pt						/AGMGrad_tint_range_0 TintRange AGMGrad_range get 0 get pt						/AGMGrad_tint_range_1 TintRange AGMGrad_range get 1 get pt						AGMGrad_tint_range_0 AGMGrad_tint_range_1 2 copy gt{							/AGMGrad_tint_min xdf							/AGMGrad_tint_max xdf						}{							/AGMGrad_tint_max xdf							/AGMGrad_tint_min xdf						}ifelse						NumTintComponents 1 eq						{							Colorants 0 get get_csd_by_name	/ColorLookup get							/exch cvx 255 /mul cvx /cvi cvx /get cvx							/aload cvx /pop cvx						}{							/exch cvx  /pop	cvx								255 /mul cvx /cvi cvx							/AGMGrad_tint /xp cvx							/AGMGrad_TintRamp TintRamp 1 get def						 							0 1 NumComponents 1 sub{								Ramp exch get dup type /stringtype eq 									{									6 dict begin									/AGMGrad_Ramp xp									/AGMGrad_lookup 256 string def									/AGMGrad_min AGMGrad_TintRamp 0 get def									/AGMGrad_max AGMGrad_TintRamp dup length 1 sub get def									/AGMGrad_index 0 def									0 1 AGMGrad_min										{										AGMGrad_lookup exch AGMGrad_Ramp 0 get put										}for									AGMGrad_max 1 255										{										AGMGrad_lookup exch AGMGrad_Ramp dup length 1 sub get put										}for									AGMGrad_min 1 AGMGrad_max										{										/AGMGrad_count xp										AGMGrad_index 1 AGMGrad_TintRamp length 2 sub											{											AGMGrad_TintRamp exch get AGMGrad_count ge												{												exit												}if											/AGMGrad_index AGMGrad_index 1 add def											}for										AGMGrad_lookup AGMGrad_count										AGMGrad_Ramp AGMGrad_index get										put										}for																			AGMGrad_lookup /AGMGrad_tint cvx /get cvx 255 /div cvx									end									}{pop 0}ifelse							}for						}ifelse					] cvx				] setcolorspace				/AGMGrad_nColorSpace currentcolorspace pt			}if						AGMGrad_nSamples 1 gt{ 				firstRampColor			}if			SpotColor{				/AGMGrad_C0 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C0_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C0 [currentcolor] pt				/AGMGrad_C0_Space currentcolorspace pt			}ifelse			AGMGrad_nSamples 1 gt{ 				lastRampColor			}if			SpotColor{				/AGMGrad_C1 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C1_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C1 [currentcolor] pt				/AGMGrad_C1_Space currentcolorspace pt			}ifelse						/AGMGrad_rampColorSpace AGMGrad_C0_Space pt					}def	}if}def/npop{	{pop}repeat}def/pt{	Adobe_AGM_Gradient 3 1 roll put}def/xp{	exch pt}def/mySave{	save /AGMGrad_sSave xp}def/myRestore{	AGMGrad_sSave type /savetype eq{		AGMGrad_sSave restore	}if}def/pushRampSpace{	newpath gsave	dup /AGMGrad_bUMatrix xp concat }def/popRampSpace{	grestore}def/makeByte8{	/AGMGrad_tmp 0 pt	255 mul cvi	8 string 8{		dup AGMGrad_tmp 3 index put 		/AGMGrad_tmp AGMGrad_tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 AGMGrad_imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/path_bbox{	{currentpoint} stopped {		0 0 0 0	}{		pop pop		pathbbox	}ifelse}def/expandOne	{	/AGMGrad_tmp xp	dup type /stringtype ne{		AGMGrad_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 AGMGrad_tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/AGMGrad_channels xp	/AGMGrad_len xp	AGMGrad_channels{		AGMGrad_len expandOne AGMGrad_channels 1 roll	}repeat}def/substituteBlack{	dup AGMGrad_black eq{		pop /Black	}if}def/settints{	/AGMGrad_currenttint xp}def/currenttints{	AGMGrad_currenttint}def/setcolorants{	/AGMGrad_currentcolorant xp}def/currentcolorants{	AGMGrad_currentcolorant}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/rampColor{			/AGMGrad_cmpIndx 0 pt	AGMCORE_producing_seps not SpotColor and AGMGrad_enabledSmoothShade and not{		NumComponents{			Ramp AGMGrad_cmpIndx get dup type /stringtype eq{				/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx			}if			/AGMGrad_cmpIndx AGMGrad_cmpIndx 1 add pt		}repeat		{			currentdict/Decode known{				0 2 NumComponents 2 mul 1 sub{					/AGMGrad_i xp					NumComponents -1 roll					Decode AGMGrad_i 1 add get 					Decode AGMGrad_i get 					sub mul 					Decode AGMGrad_i get add				}for			}if			setcolor		} bind /exec cvx	}if	AGMCORE_producing_seps AGMGrad_enabledSmoothShade or SpotColor and{		/mark cvx		TintRamp 0 get dup type /stringtype eq{			/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx		}if		NumTintComponents 2 eq{			 TintRamp 1 get dup type /stringtype eq{				/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx			}if		}if		(]) cvn cvx		/settints cvx		Colorants /setcolorants cvx	}if}def/firstRampColor{	/AGMGrad_ndx 0 pt	[rampColor] cvx exec}def			/lastRampColor{	/AGMGrad_ndx AGMGrad_nSamples 1 sub pt	[rampColor] cvx exec}def			/useRectImage{	AGMGrad_subSampleOK AGMGrad_usingSmoothShade not and{		0 1 dtransform atan cvi 90 mod 0 eq		1 0 dtransform atan cvi 90 mod 0 eq		and	}{		false	}ifelse}def/linealImage{	useRectImage AGMGrad_PathsOnly or{		rectImage	}{		rampImage	}ifelse}def/linealRamp{	pushRampSpace	AGMGrad_ramp{		linealImage	}{		linealFill	}ifelse	popRampSpace	/AGMGrad_rampIndex AGMGrad_rampIndex 1 sub pt	AGMGrad_rampIndex 0 ge{		getRampData	}if}def/radialGrad{	/AGMGrad_usingShells currentoverprint AGMCORE_producing_seps and AGMGrad_usingShells or pt		/AGMGrad_firstShell true pt	currentoverprint AGMCORE_producing_seps and{				newpath		clippath path_bbox 		1 add 4 1 roll		1 add 4 1 roll		1 sub 4 1 roll		1 sub 4 1 roll		AGMGrad_bbox astore pop				newpath		AGMGrad_bbox 0 get AGMGrad_bbox 1 get moveto		AGMGrad_bbox 2 get AGMGrad_bbox 1 get lineto		AGMGrad_bbox 2 get AGMGrad_bbox 3 get lineto		AGMGrad_bbox 0 get AGMGrad_bbox 3 get lineto		closepath		dup		gsave dup /AGMGrad_bUMatrix xp concat		AGMGrad_rampPoint 0 moveto 0 0 AGMGrad_rampPoint 0 360 arc closepath		eoclip fill		popRampSpace	}if	pushRampSpace		AGMGrad_radHilite{		AGMGrad_rampPoint 1 lt{			1 AGMGrad_rampPoint sub dup AGMGrad_xHi mul exch AGMGrad_yHi mul translate		}if	}if	AGMGrad_nRamps{		radialRamp		/AGMGrad_rampIndex AGMGrad_rampIndex 1 sub pt		AGMGrad_rampIndex 0 ge{			getRampData		}if	}repeat		popRampSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/AGMGrad_ramp true pt		AGMGrad_rampDict null ne{		end	}if	/AGMGrad_rampDict AGMGrad_rampData AGMGrad_rampIndex get pt	AGMGrad_rampDict begin				Start End		AGMGrad_gradType 1 eq{			exch		}if		/AGMGrad_endPoint xp		/AGMGrad_rampPoint xp		/AGMGrad_midPoint Mid pt		/AGMGrad_colorRamp CSA map_csa 0 get /DeviceGray ne pt		currentdict set_csa_crd		SpotColor AGMCORE_producing_seps and{						/SpotConverted [				0 AGMGrad_SpotConverted				NumTintComponents 2 eq{					1 AGMGrad_SpotConverted				}{					false				}ifelse			] def			/RenderCMYK SpotConverted aload pop or def		}{			/RenderCMYK true def		}ifelse		AGMGrad_ramp{			/AGMGrad_nSamples NumSamples pt			AGMGrad_enabledSmoothShade not{				/AGMGrad_ramp AGMGrad_nSamples 1 gt pt			}if		}if}def/rampImage{	AGMGrad_enabledSmoothShade{		fillRamp	}{		NumSamples setImageParms		[ Ramp aload pop ]		currentdict/Decode known{			Decode		}{			[ NumComponents {0 1} repeat ]		}ifelse		dictImage	}ifelse}def	/rectImage{	gsave	/AGMGrad_sInc 1 pt	/AGMGrad_bInc 1 AGMGrad_nSamples div pt	/AGMGrad_nSubSamples AGMGrad_nSamples pt	/AGMGrad_optimize false pt			AGMGrad_subSampleOK{		/AGMGrad_uRampLen 1 0 dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt pt		/AGMGrad_pChange AGMGrad_uRampLen 0 eq{0}{AGMGrad_nSamples AGMGrad_uRampLen div}ifelse pt				AGMGrad_pChange .5 gt dup /AGMGrad_optimize xp{			/AGMGrad_nSubSamples AGMGrad_uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/AGMGrad_bInc 1 AGMGrad_nSubSamples div pt			/AGMGrad_sInc AGMGrad_nSamples 1 sub AGMGrad_nSubSamples 1 sub div pt		}if	}if		0	AGMGrad_nSubSamples	[	/dup cvx	AGMGrad_optimize {		/round cvx /cvi cvx	} if	/AGMGrad_ndx /exch cvx /pt cvx	rampColor	0 0 AGMGrad_bInc 1 /rectfill cvx	AGMGrad_bInc 0 /translate cvx	AGMGrad_sInc /add cvx	] cvx bind	repeat	pop	grestore}def/radialInit{	/AGMGrad_nRadSamples AGMGrad_nSamples dup 0 eq{pop 1}if pt	/AGMGrad_sInc -1 pt	/AGMGrad_rampLen AGMGrad_rampPoint AGMGrad_endPoint sub pt	/AGMGrad_bInc AGMGrad_rampLen AGMGrad_nSamples div neg pt	/AGMGrad_optimize false pt	AGMGrad_subSampleOK{		/AGMGrad_uRampLen			AGMGrad_rampLen 0 dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt			0 AGMGrad_rampLen dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/AGMGrad_pChange 			AGMGrad_uRampLen 0 eq{				0			}{				AGMGrad_nSamples AGMGrad_uRampLen div			}ifelse		pt		AGMGrad_pChange .5 gt dup /AGMGrad_optimize xp{			/AGMGrad_nRadSamples AGMGrad_uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/AGMGrad_bInc AGMGrad_rampLen AGMGrad_nRadSamples div neg pt			/AGMGrad_sInc AGMGrad_nSamples 1 sub AGMGrad_nRadSamples 1 sub div neg pt		}if	}if	AGMGrad_radHilite{		/AGMGrad_xBCInc AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_nRadSamples div pt		/AGMGrad_yBCInc AGMGrad_yHi AGMGrad_rampLen mul AGMGrad_nRadSamples div pt	}if}def/radialRamp{	AGMGrad_enabledSmoothShade{		fillRamp	}{		/AGMGrad_saveMatrix AGMGrad_saveMatrix currentmatrix pt				radialInit			true		AGMCORE_producing_seps Interpolation and{			AGMGrad_nSamples 1 gt{ 				pop				firstRampColor currentInkN				lastRampColor currentInkN				or			}if		}if		{			AGMGrad_rampPoint					AGMGrad_nSamples 1 sub					AGMGrad_nRadSamples 			[				/dup cvx						AGMGrad_optimize{					/round cvx /cvi cvx				}if						/AGMGrad_ndx /exch cvx /pt cvx								AGMGrad_usingShells{					/AGMGrad_firstShell cvx{						/AGMGrad_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						rampColor						AGMGrad_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx AGMGrad_bInc /add cvx /exch cvx						AGMGrad_sInc /add cvx						AGMGrad_radHilite{					AGMGrad_xBCInc AGMGrad_yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			AGMGrad_usingShells{				0 0 AGMGrad_rampPoint 360 0 arcn fill			}if		}ifelse			AGMGrad_saveMatrix setmatrix				AGMGrad_radHilite{			AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul translate		}if				AGMGrad_usingShells AGMGrad_rampIndex 0 eq and{			fill		}if		}ifelse}def/matrix_invertible{	{		mark 1 index AGMGrad_tmpMat invertmatrix	} stopped {		cleartomark		pop		false	}{		cleartomark		pop		true	}ifelse}def/Gb{	Adobe_AGM_Gradient begin	/AGMGrad_rampDict null pt	mySave}def/Gd{	Adobe_AGM_Gradient begin	/AGMGrad_nColorsBd xp	/AGMGrad_gradType xp	/AGMGrad_gradName xp	[	[}def/Gm{	AGMGrad_renderFlag 2 ne{		AGMGrad_gradType 0 eq{			linealRamp		}{			radialGrad		}ifelse	}{		pop	}ifelse}def	/Gg{	/AGMGrad_gMatrix xp	4 npop	/AGMGrad_gradName xp	/AGMGrad_renderFlag xp	/AGMGrad_retainPath xp	/AGMGrad_enabledSmoothShade false pt		path_bbox 3 index 2 index eq{		2 index 1 index eq{			/AGMGrad_renderFlag 2 pt		}if	}if		AGMGrad_gMatrix matrix_invertible not{		/AGMGrad_renderFlag 2 pt	}if		4 npop 	AGMGrad_renderFlag 2 ne{		/AGMGrad_enabledSmoothShade 			level3{				AGMGrad_usingSmoothShade				AGMCORE_producing_seps not				currentoverprint not or and				AGMGrad_PathsOnly not and				AGMCORE_in_rip_sep 1 currenttransfer exec 0.5 lt and not and			}{				false			}ifelse		pt				AGMGrad_renderFlag 3 eq{			eoclip		}{			clip		}ifelse					AGMGrad_gradNames AGMGrad_gradName known{			AGMGrad_gradNames AGMGrad_gradName get			aload pop			/AGMGrad_gradType xp			2 sub dup /AGMGrad_rampIndex xp			/AGMGrad_maxRampIndex xp			/AGMGrad_rampData xp			/AGMGrad_nRamps AGMGrad_rampData length pt		}if		getRampData				AGMGrad_enabledSmoothShade{			getRampColorSpace		}if				AGMGrad_gradType 0 eq{			firstRampColor		}{			lastRampColor		}ifelse						currentcolorspace 0 get /DeviceN eq{			currenttints 0 get			currenttints length 2 eq{				currenttints 1 get			}if			setcolor		}if				currentcolorspace 0 get /Separation eq{			currenttints 0 get			setcolor		}if						currentoverprint AGMCORE_producing_seps and not{			gsave fill grestore		}if	}if		AGMGrad_gradType 1 eq{		AGMGrad_gMatrix Gm	}if}def/Gh{	dup 1 gt{		pop 1	}if	2 copy	exch dup sin exch cos	2 index mul exch	2 index mul 	neg /AGMGrad_yHi xp	/AGMGrad_xHi xp	/AGMGrad_radHilite AGMGrad_xHi 0 ne AGMGrad_yHi 0 ne or pt	3 npop}def/Gc{		AGMGrad_renderFlag 2 eq	AGMGrad_enabledSmoothShade or{		pop	}{		dup matrix_invertible{			AGMGrad_gMatrix AGMGrad_tmpMat concatmatrix			pushRampSpace			AGMGrad_rampIndex 0 lt{				lastRampColor			}if			linealFill			popRampSpace		}{			pop		}ifelse	}ifelse}def/Gr{	dup matrix_invertible{		AGMGrad_gMatrix AGMGrad_tmpMat concatmatrix		Gm	}{		pop	}ifelse}def/GB{	AGMGrad_rampDict null ne{		end	}if	AGMGrad_retainPath	myRestore	end	not{		newpath	}if}def/GD{	currentdict/AGMGrad_gradNames get null eq{		/AGMGrad_gradNames 20 dict def	}if	]	dup {		begin			/Ramp [ Ramp 0 NumComponents getinterval aload pop NumSamples NumComponents expandColor ] def			currentdict/Colorant known{				/TintRamp [ TintRamp 0 NumTintComponents getinterval aload pop NumSamples NumTintComponents expandColor ] def			}if		end	} forall	AGMGrad_nColorsBd AGMGrad_gradType	]  AGMGrad_gradName exch /AGMGrad_gradNames xput	end}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Gradient_Sep 1.0 0%%Version: 1.0 0%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)systemdict /setpacking known{	currentpacking	true setpacking} ifAdobe_AGM_Gradient begin/initializeSep{	/AGMGrad_ccAry1 5 array pt	/AGMGrad_whiteBytes 1 makeByte8 pt	/AGMGrad_name null pt	/AGMGrad_nColorSpace null pt		AGMCORE_composite_job{		initializeInRIPSeps	}{		initializeHostBasedSeps	}ifelse	initializeAllSeps	Adobe_AGM_Gradient{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/initializeAllSeps{	AGMGrad_PathsOnly not level2 not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave					8 setImageParms					AGMGrad_colorRamp{						SpotColor{							TintRamp 0 currenttints 0 get makeByte8 put							currenttints length 2 eq{								TintRamp 1 currenttints 1 get makeByte8 put							}if						}if								currentcolor						4{							makeByte8 4 1 roll						}repeat												AGMGrad_SepColorImage					}{						currentcolor 1 exch sub 												makeByte8 												AGMGrad_SepImage					}ifelse				myRestore			}ifelse		}def	}if	 /AGMGrad_knockOut{		AGMGrad_PathsOnly level2 or{			gsave			1 setgray 			newpath			0 0 moveto 1 0 lineto 1 1 lineto 0 1 lineto closepath 			AGMGrad_&fill			grestore		}{			8 setImageParms AGMGrad_whiteBytes AGMGrad_&image		}ifelse	}def	/setCustomColor	{		1 index AGMGrad_black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll AGMGrad_ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setPreTintCustomColor	{		{			pop setcmykcolor		}{			setCustomColor		}ifelse	}def		/AGMGrad_CurrentInk{		true		AGMCORE_in_rip_sep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentgray 1 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			RenderCMYK{			AGMGrad_CurrentInk		}{			currentcolorspace 0 get /DeviceCMYK eq{				gsave				currentcolor currentcolorants 0 get currenttints 0 get SpotConverted 0 get setPreTintCustomColor				AGMGrad_CurrentInk				grestore				currenttints length 2 eq{					gsave					currentcolor currentcolorants 1 get currenttints 1 get SpotConverted 1 get setPreTintCustomColor					AGMGrad_CurrentInk					grestore					or				}if			}{				true				}ifelse		} ifelse	}def	/fillOvp{		currentoverprint{			AGMCORE_in_rip_sep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentgray 1 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		AGMGrad_&fill	}def	/fill{		RenderCMYK{			fillOvp		}{			currentcolorspace 0 get /DeviceGray eq{				0 0 0 currentgray 1 exch sub setcmykcolor			}if						currentcolorspace 0 get /DeviceCMYK eq{								gsave				currentcolor currentcolorants 0 get currenttints 0 get SpotConverted 0 get setPreTintCustomColor				fillOvp 				grestore				currenttints length 2 eq{					gsave					/AGMGrad_currentoverprint currentoverprint pt					true setoverprint					currentcolor currentcolorants 1 get currenttints 1 get SpotConverted 1 get setPreTintCustomColor					fillOvp					AGMGrad_currentoverprint setoverprint					grestore				}if			}{				gsave				[/Separation currentcolorants 0 get substituteBlack currentcolorspace [/pop cvx currentcolor] cvx ] setcolorspace				currenttints 0 get setcolor				fillOvp				grestore				currenttints length 2 eq{					gsave					/AGMGrad_currentoverprint currentoverprint pt					[/Separation currentcolorants 1 get substituteBlack currentcolorspace [/pop cvx currentcolor] cvx ] setcolorspace										true setoverprint					currenttints 1 get setcolor					fillOvp					AGMGrad_currentoverprint setoverprint					grestore				}if			}ifelse			newpath		}ifelse	}def		/rampImage{		currentoverprint{			rectImage		}{			AGMGrad_enabledSmoothShade{				fillRamp			}{				AGMGrad_nSamples setImageParms				Ramp aload pop				AGMGrad_colorRamp{					AGMGrad_SepColorImage				}{					AGMGrad_SepImage				}ifelse			}ifelse		}ifelse	}def}def/initializeInRIPSeps{	/AGMGrad_decodeNorm	[0 1] pt	/AGMGrad_SpotConverted	{		SpotColor{			Colorants exch get convert_spot_to_process		}{			pop false		}ifelse	}def	/AGMGrad_SepImage{			/DeviceGray setcolorspace			AGMGrad_decodeNorm dictImage	}def	/AGMGrad_SepColorImage{		RenderCMYK{			[ NumComponents 1 add 1 roll ] 			[ NumComponents { 0 1 } repeat ]			dictImage		}{			NumComponents npop			[/Separation Colorants 0 get substituteBlack /DeviceGray{}] setcolorspace			4 copy			TintRamp 0 get AGMGrad_decodeNorm dictImage			/AGMGrad_currentoverprint currentoverprint pt			true setoverprint			NumTintComponents 2 eq{				[/Separation Colorants 1 get substituteBlack /DeviceGray{}] setcolorspace				TintRamp 1 get  AGMGrad_decodeNorm dictImage			}{				4 npop			}ifelse			AGMGrad_currentoverprint setoverprint		}ifelse	}def		/getRampColorSpace{			SpotColor{								[					NumTintComponents 2 eq					{						/DeviceN 							[							Colorants 0 get							substituteBlack							Colorants 1 get							substituteBlack							] 					}{						/Separation						Colorants 0 get						substituteBlack					}ifelse					CSA map_csa 					[						/AGMGrad_range NumTintComponents 2 eq {1} {0} ifelse pt						/AGMGrad_tint_range_0 TintRange AGMGrad_range get 0 get pt						/AGMGrad_tint_range_1 TintRange AGMGrad_range get 1 get pt						AGMGrad_tint_range_0 AGMGrad_tint_range_1 2 copy gt{							/AGMGrad_tint_min xdf							/AGMGrad_tint_max xdf						}{							/AGMGrad_tint_max xdf							/AGMGrad_tint_min xdf						}ifelse						NumTintComponents 1 eq						{							Colorants 0 get get_csd_by_name	/ColorLookup get							/exch cvx 255 /mul cvx /cvi cvx /get cvx							/aload cvx /pop cvx						}{							/exch cvx  /pop	cvx								255 /mul cvx /cvi cvx							/AGMGrad_tint /xp cvx							/AGMGrad_TintRamp TintRamp 1 get def						 							0 1 NumComponents 1 sub{								Ramp exch get dup type /stringtype eq 									{									6 dict begin									/AGMGrad_Ramp xp									/AGMGrad_lookup 256 string def									/AGMGrad_min AGMGrad_TintRamp 0 get def									/AGMGrad_max AGMGrad_TintRamp dup length 1 sub get def									/AGMGrad_index 0 def									0 1 AGMGrad_min										{										AGMGrad_lookup exch AGMGrad_Ramp 0 get put										}for									AGMGrad_max 1 255										{										AGMGrad_lookup exch AGMGrad_Ramp dup length 1 sub get put										}for									AGMGrad_min 1 AGMGrad_max										{										/AGMGrad_count xp										AGMGrad_index 1 AGMGrad_TintRamp length 2 sub											{											AGMGrad_TintRamp exch get AGMGrad_count ge												{												exit												}if											/AGMGrad_index AGMGrad_index 1 add def											}for										AGMGrad_lookup AGMGrad_count										AGMGrad_Ramp AGMGrad_index get										put										}for																			AGMGrad_lookup /AGMGrad_tint cvx /get cvx 255 /div cvx									end									}{pop 0}ifelse							}for						}ifelse					] cvx				] setcolorspace				/AGMGrad_nColorSpace currentcolorspace pt			}if						AGMGrad_nSamples 1 gt{ 				firstRampColor			}if			SpotColor{				/AGMGrad_C0 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C0_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C0 [currentcolor] pt				/AGMGrad_C0_Space currentcolorspace pt			}ifelse			AGMGrad_nSamples 1 gt{ 				lastRampColor			}if			SpotColor{				/AGMGrad_C1 [					currenttints 0 get					currenttints length 2 eq{						currenttints 1 get					}if				] pt				/AGMGrad_C1_Space AGMGrad_nColorSpace pt			}{				/AGMGrad_C1 [currentcolor] pt				/AGMGrad_C1_Space currentcolorspace pt			}ifelse						/AGMGrad_rampColorSpace AGMGrad_C0_Space pt					}def}def/initializeHostBasedSeps{	/setcolor null pt	/currentcolor null pt	/setcolorspace null pt	/currentcolorspace null pt	/AGMGrad_currentcmyk 4 array pt	/AGMGrad_currentgray null pt	/AGMGrad_currentrgb 3 array pt			/setcolorspace	{		0 get /AGMGrad_currentcolorspace xp		AGMGrad_currentcolorspace /DeviceCMYK eq{			/setcolor 			{				4 copy AGMGrad_currentcmyk astore pop setcmykcolor			}bind pt			/currentcolor 			{				AGMGrad_currentcmyk aload pop			}bind pt		}{			AGMGrad_currentcolorspace /DeviceGray eq{				/setcolor				{					dup /AGMGrad_currentgray xp setgray				}bind pt				/currentcolor				{					AGMGrad_currentgray				}bind pt			}{				AGMGrad_currentcolorspace /DeviceRGB eq{					/setcolor					{						3 copy AGMGrad_currentrgb astore pop setrgbcolor					} bind pt					/currentcolor					{						AGMGrad_currentrgb aload pop					}bind pt				}if			}ifelse		}ifelse	}pt	/currentcolorspace	{		[ AGMGrad_currentcolorspace ]	}bind pt	/AGMGrad_invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/AGMGrad_ccThrough{		gsave		1 setCustomColor		currentgray 1 ne		grestore	}def	/AGMGrad_SpotConverted	{		AGMCORE_is_cmyk_sep SpotColor and{			Colorants exch get /AGMGrad_name xp			AGMGrad_name dup null ne exch AGMGrad_black ne and{				1 1 1 1 AGMGrad_name AGMGrad_ccThrough			}{				false			}ifelse		}{			pop false		}ifelse	}def	/AGMGrad_SpotChannel	{		AGMCORE_is_cmyk_sep SpotColor not and{			pop false		}{			Colorants exch get /AGMGrad_name xp			AGMGrad_name null eq{				false			}{				1 1 1 1 AGMGrad_name AGMGrad_ccThrough 			}ifelse		}ifelse	}def	/getChannelData	{		AGMCORE_is_cmyk_sep RenderCMYK and{			AGMCORE_black_plate{				4 1 roll 3 npop			}{				AGMCORE_yellow_plate{					4 2 roll 3 npop				}{					AGMCORE_magenta_plate{						4 3 roll 3 npop					}{						3 npop					}ifelse				}ifelse			}ifelse			/Invert /IsData		}{			4 npop			/NoInvert /NoData						SpotColor{				0 AGMGrad_SpotChannel{					pop pop					TintRamp 0 get /Invert /IsData 				}{					NumTintComponents 2 eq{						1 AGMGrad_SpotChannel{							pop pop							TintRamp 1 get /Invert /IsData 						}if					}if				}ifelse			}if		}ifelse	}def	/renderChannelData	{		gsave				/IsData eq{			/Invert eq{				AGMGrad_invertXfer			}if			systemdict/image get exec		}{			5 npop			AGMGrad_knockOut		}ifelse				grestore	}def	/AGMGrad_SepImage{		dup dup dup		getChannelData		exch pop /NoInvert exch		renderChannelData	}def	/AGMGrad_SepColorImage{				/AGMGrad_currentoverprint currentoverprint pt		SpotColor{			NumTintComponents 2 eq{				 1 AGMGrad_SpotChannel{					true setoverprint				}if			}if		}if		getChannelData 		renderChannelData			AGMGrad_currentoverprint setoverprint	}def	/getRampColorSpace{						AGMGrad_nSamples 1 gt{ 			firstRampColor		}if				/AGMGrad_C0_Space [/DeviceGray] pt		RenderCMYK{			/AGMGrad_C0 [currentgray] pt		}{			/AGMGrad_C0 [				0				0 AGMGrad_SpotChannel{					pop currenttints 0 get				}if				currenttints length 2 eq{					1 AGMGrad_SpotChannel{						pop currenttints 1 get					}if				}if				1 exch sub			] pt		}ifelse				AGMGrad_nSamples 1 gt{ 			lastRampColor		}if				/AGMGrad_C1_Space [/DeviceGray] pt		RenderCMYK{			/AGMGrad_C1 [currentgray] pt		}{			/AGMGrad_C1 [				0					0 AGMGrad_SpotChannel{						pop currenttints 0 get					}if					currenttints length 2 eq{						 1 AGMGrad_SpotChannel{							pop currenttints 1 get						}if					}if				1 exch sub			] pt		}ifelse				/AGMGrad_rampColorSpace AGMGrad_C0_Space pt	}def}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Gradient/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: rpp_icru49_cu_col.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Gradient/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -315.827 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 315.827 li476.458 315.827 li476.458 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"83.3492 215.863 mo83.3492 8.38868 li76.8863 8.38868 li76.8863 215.863 lifalse sop(151 ) 0 2 Adobe_AGM_Gradient/Gd get exec<</Start 0 /End 1 /Mid 0.61236 /NumSamples 98 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<08080808080909090A0A0A0B0B0C0C0D0D0E0E0F0F10101111121213141415151617171819191A1B1B1C1D1D1E1F202021222323242526272728292A2B2B2C2D2E2F3030313233343536373838393A3B3C3D3E3F404142434445464748494A4B4B4C><0000000001010101010202020303030404040505050606070708080809090A0A0B0B0C0C0D0D0E0E0F0F1010111112121313141515161617171819191A1A1B1C1C1D1E1E1F2020212122232324252526272828292A2A2B2C2C2D2E2F2F3031323233>0 0 ] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (151 ) 0 0 0 7.97852 [-6.4626 0 0 211.475 83.3174 6.38868 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB70.4156 215.863 mo70.4156 8.38868 li76.879 8.38868 li76.879 215.863 li(152 ) 0 3 Adobe_AGM_Gradient/Gd get exec<</Start 0.988765 /End 1 /Mid 0.5 /NumSamples 2 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<4D4D><3333>0 0 ] /RenderCMYK null/SpotColor false>><</Start 0 /End 0.988765 /Mid 0.602274 /NumSamples 95 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<080808080909090A0A0A0B0B0C0C0D0D0E0E0F0F101111121213141415151617171819191A1B1C1C1D1E1F1F2021222223242525262728292A2A2B2C2D2E2F2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4B4C4C><000000000101010102020203030304040505050606070707080809090A0A0B0B0C0C0D0D0E0E0F0F10101112121313141415161617171819191A1A1B1C1C1D1E1E1F1F20212122232324252526272828292A2A2B2C2C2D2E2F2F3031323233>0 0 ] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (152 ) 0 0 0 7.9795 [6.46339 0 0 211.475 70.4473 6.38868 ] Gg[-32767 0 0 1 0 0 ] Gc[0.988765 0 0 1 0 0 ] Gr[0.011236 0 0 1 0.988765 0 ] Gr[32767 0 0 1 1 0 ] GcGB128.709 215.863 mo128.709 8.38868 li122.246 8.38868 li122.246 215.863 li(153 ) 0 2 Adobe_AGM_Gradient/Gd get exec<</Start 0 /End 1 /Mid 0.61236 /NumSamples 98 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<08080808080909090A0A0A0B0B0C0C0D0D0E0E0F0F10101111121213141415151617171819191A1B1B1C1D1D1E1F202021222323242526272728292A2B2B2C2D2E2F3030313233343536373838393A3B3C3D3E3F404142434445464748494A4B4B4C><000000000101010101020202030303030404040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0F0F1010111112121314141515161617171819191A1A1B1C1C1D1D1E1F1F2020212222232424252626272828292A2A2B2C2C2D2E2E2F3030>0 0 ] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (153 ) 0 0 0 7.9795 [-6.46339 0 0 211.475 128.677 6.38868 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB115.776 215.863 mo115.776 8.38868 li122.239 8.38868 li122.239 215.863 li(154 ) 0 3 Adobe_AGM_Gradient/Gd get exec<</Start 0.988765 /End 1 /Mid 0.5 /NumSamples 2 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<4D4D><3333>0 0 ] /RenderCMYK null/SpotColor false>><</Start 0 /End 0.988765 /Mid 0.602274 /NumSamples 95 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<080808080909090A0A0A0B0B0C0C0D0D0E0E0F0F101111121213141415151617171819191A1B1C1C1D1E1F1F2021222223242525262728292A2A2B2C2D2E2F2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4B4C4C><000000000101010102020203030304040505050606070707080809090A0A0B0B0C0C0D0D0E0E0F0F10101112121313141415161617171819191A1A1B1C1C1D1E1E1F1F20212122232324252526272828292A2A2B2C2C2D2E2F2F3031323233>0 0 ] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (154 ) 0 0 0 7.97901 [6.463 0 0 211.475 115.808 6.38868 ] Gg[-32767 0 0 1 0 0 ] Gc[0.988765 0 0 1 0 0 ] Gr[0.011236 0 0 1 0.988765 0 ] Gr[32767 0 0 1 1 0 ] GcGB320.947 215.863 mo320.947 8.38868 li314.484 8.38868 li314.484 215.863 li(155 ) 0 2 Adobe_AGM_Gradient/Gd get exec<</Start 0 /End 1 /Mid 0.61236 /NumSamples 98 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<08080808080909090A0A0A0B0B0C0C0D0D0E0E0F0F10101111121213141415151617171819191A1B1B1C1D1D1E1F202021222323242526272728292A2B2B2C2D2E2F3030313233343536373838393A3B3C3D3E3F404142434445464748494A4B4B4C><0000000001010101010202020303030404040505050606070708080809090A0A0B0B0C0C0D0D0E0E0F0F1010111112121313141515161617171819191A1A1B1C1C1D1E1E1F2020212122232324252526272828292A2A2B2C2C2D2E2F2F3031323233>0 0 ] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (155 ) 0 0 0 7.97901 [-6.463 0 0 211.475 320.916 6.38868 ] Gg[-32767 0 0 1 0 0 ] Gc[1 0 0 1 0 0 ] Gr[32767 0 0 1 1 0 ] GcGB308.014 215.863 mo308.014 8.38868 li314.477 8.38868 li314.477 215.863 li(156 ) 0 3 Adobe_AGM_Gradient/Gd get exec<</Start 0.994382 /End 1 /Mid 0.5 /NumSamples 2 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<4D4D><3333>0 0 ] /RenderCMYK null/SpotColor false>><</Start 0 /End 0.994382 /Mid 0.602274 /NumSamples 95 /CSA /1 /Interpolation false/NumComponents 4 /Ramp [<080808080909090A0A0A0B0B0C0C0D0D0E0E0F0F101111121213141415151617171819191A1B1C1C1D1E1F1F2021222223242525262728292A2A2B2C2D2E2F2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4B4C4C><000000000101010102020203030304040505050606070707080809090A0A0B0B0C0C0D0D0E0E0F0F10101112121313141415161617171819191A1A1B1C1C1D1E1E1F1F20212122232324252526272828292A2A2B2C2C2D2E2F2F3031323233>0 0 ] /RenderCMYK null/SpotColor false>>GDAdobe_AGM_Gradient/Gb get execfalse 1 (156 ) 0 0 0 7.97901 [6.463 0 0 211.475 308.046 6.38868 ] Gg[-32767 0 0 1 0 0 ] Gc[0.994382 0 0 1 0 0 ] Gr[0.00561798 0 0 1 0.994382 0 ] Gr[32767 0 0 1 1 0 ] GcGB1 0.73 0 0.15 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 14{/.notdef}repeat /slash /zero /one /two 26{/.notdef}repeat /M 5{/.notdef}repeat /S 2{/.notdef}repeat /V 4{/.notdef}repeat /bracketleft /.notdef /bracketright 5{/.notdef}repeat /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt201.681 309.352 mov(Muon momentum) sh/Times-Roman*1 findfont [11.8799 0 0 -11.8799 0 0 ]mfnt sfnt35.9419 216.093 mov(1) sh28.7363 143.538 mov(10) sh21.5303 66.6665 mov(100) sh/Times-Roman*1 findfont [0 -15.1199 -15.1199 0 0 0 ]mfnt sfnt18.3599 203.343 mov(Stopping power [MeV cm) sh/Times-Roman*1 findfont [0 -12 -12 0 0 0 ]mfnt sfnt15.1199 45.0275 mov(2) sh/Times-Roman*1 findfont [0 -15.1199 -15.1199 0 0 0 ]mfnt sfnt18.3599 39.0275 mov(/g]) sh0.5 lw0 lc0 lj2.5 ml[] 0 dshtrue sadj46.546 216.093 mo463.63 216.093 li1 0.73 0 0.15 cmyks92.8648 216.093 mo92.8648 208.838 li1 0.73 0 0.15 cmyks139.215 216.093 mo139.215 208.838 li1 0.73 0 0.15 cmyks185.564 216.093 mo185.564 208.838 li1 0.73 0 0.15 cmyks231.914 216.093 mo231.914 208.838 li1 0.73 0 0.15 cmyks278.232 216.093 mo278.232 208.838 li1 0.73 0 0.15 cmyks324.582 216.093 mo324.582 208.838 li1 0.73 0 0.15 cmyks370.932 216.093 mo370.932 208.838 li1 0.73 0 0.15 cmyks417.281 216.093 mo417.281 208.838 li1 0.73 0 0.15 cmyks46.546 8.5918 mo463.63 8.5918 li1 0.73 0 0.15 cmyks92.8648 8.5918 mo92.8648 15.878 li1 0.73 0 0.15 cmyks139.215 8.5918 mo139.215 15.878 li1 0.73 0 0.15 cmyks185.564 8.5918 mo185.564 15.878 li1 0.73 0 0.15 cmyks231.914 8.5918 mo231.914 15.878 li1 0.73 0 0.15 cmyks278.232 8.5918 mo278.232 15.878 li1 0.73 0 0.15 cmyks324.582 8.5918 mo324.582 15.878 li1 0.73 0 0.15 cmyks370.932 8.5918 mo370.932 15.878 li1 0.73 0 0.15 cmyks417.281 8.5918 mo417.281 15.878 li1 0.73 0 0.15 cmyks46.546 216.093 mo46.546 8.5918 li1 0.73 0 0.15 cmyks46.546 139.222 mo54.8726 139.222 li1 0.73 0 0.15 cmyks46.546 62.3497 mo54.8726 62.3497 li1 0.73 0 0.15 cmyks46.546 192.95 mo50.709 192.95 li1 0.73 0 0.15 cmyks46.546 179.418 mo50.709 179.418 li1 0.73 0 0.15 cmyks46.546 169.805 mo50.709 169.805 li1 0.73 0 0.15 cmyks46.546 162.366 mo50.709 162.366 li1 0.73 0 0.15 cmyks46.546 156.274 mo50.709 156.274 li1 0.73 0 0.15 cmyks46.546 151.131 mo50.709 151.131 li1 0.73 0 0.15 cmyks46.546 146.661 mo50.709 146.661 li1 0.73 0 0.15 cmyks46.546 142.743 mo50.709 142.743 li1 0.73 0 0.15 cmyks46.546 116.078 mo50.709 116.078 li1 0.73 0 0.15 cmyks46.546 102.546 mo50.709 102.546 li1 0.73 0 0.15 cmyks46.546 92.9332 mo50.709 92.9332 li1 0.73 0 0.15 cmyks46.546 85.4942 mo50.709 85.4942 li1 0.73 0 0.15 cmyks46.546 79.4019 mo50.709 79.4019 li1 0.73 0 0.15 cmyks46.546 74.2588 mo50.709 74.2588 li1 0.73 0 0.15 cmyks46.546 69.7891 mo50.709 69.7891 li1 0.73 0 0.15 cmyks46.546 65.8707 mo50.709 65.8707 li1 0.73 0 0.15 cmyks46.546 39.2056 mo50.709 39.2056 li1 0.73 0 0.15 cmyks46.546 25.6744 mo50.709 25.6744 li1 0.73 0 0.15 cmyks46.546 16.0616 mo50.709 16.0616 li1 0.73 0 0.15 cmyks463.63 216.093 mo463.63 8.5918 li1 0.73 0 0.15 cmyks463.63 139.222 mo455.273 139.222 li1 0.73 0 0.15 cmyks463.63 62.3497 mo455.273 62.3497 li1 0.73 0 0.15 cmyks463.63 192.95 mo459.437 192.95 li1 0.73 0 0.15 cmyks463.63 179.418 mo459.437 179.418 li1 0.73 0 0.15 cmyks463.63 169.805 mo459.437 169.805 li1 0.73 0 0.15 cmyks463.63 162.366 mo459.437 162.366 li1 0.73 0 0.15 cmyks463.63 156.274 mo459.437 156.274 li1 0.73 0 0.15 cmyks463.63 151.131 mo459.437 151.131 li1 0.73 0 0.15 cmyks463.63 146.661 mo459.437 146.661 li1 0.73 0 0.15 cmyks463.63 142.743 mo459.437 142.743 li1 0.73 0 0.15 cmyks463.63 116.078 mo459.437 116.078 li1 0.73 0 0.15 cmyks463.63 102.546 mo459.437 102.546 li1 0.73 0 0.15 cmyks463.63 92.9332 mo459.437 92.9332 li1 0.73 0 0.15 cmyks463.63 85.4942 mo459.437 85.4942 li1 0.73 0 0.15 cmyks463.63 79.4019 mo459.437 79.4019 li1 0.73 0 0.15 cmyks463.63 74.2588 mo459.437 74.2588 li1 0.73 0 0.15 cmyks463.63 69.7891 mo459.437 69.7891 li1 0.73 0 0.15 cmyks463.63 65.8707 mo459.437 65.8707 li1 0.73 0 0.15 cmyks463.63 39.2056 mo459.437 39.2056 li1 0.73 0 0.15 cmyks463.63 25.6744 mo459.437 25.6744 li1 0.73 0 0.15 cmyks463.63 16.0616 mo459.437 16.0616 li1 0.73 0 0.15 cmyks0.8 lw140.531 91.2496 mo142.092 94.6783 li144.052 99.2398 li145.674 103.128 li147.939 108.547 li149.776 113.017 li151.368 116.843 li152.715 120.18 li153.909 123.119 li154.981 125.752 li155.96 128.17 li156.848 130.375 li158.41 134.263 li159.787 137.661 li160.981 140.63 li162.083 143.293 li163.951 147.886 li165.542 151.743 li167.563 156.549 li169.277 160.529 li171.635 165.856 li173.594 170.081 li175.247 173.571 li176.686 176.479 li178.002 178.959 li179.166 181.132 li180.237 183.03 li181.217 184.684 li182.962 187.5 li184.493 189.827 li185.901 191.725 li187.156 193.317 li189.36 195.858 li191.258 197.756 li193.738 199.807 li195.881 201.246 li198.912 202.776 li201.453 203.695 li203.688 204.215 li205.647 204.552 li207.453 204.736 li209.076 204.797 li210.545 204.828 li211.923 204.797 li214.433 204.644 li216.637 204.43 li218.597 204.215 li220.403 203.97 li223.556 203.48 li226.281 203.052 li229.771 202.44 li232.74 201.919 li236.873 201.154 li240.271 200.542 li243.21 200.021 li245.751 199.562 li248.017 199.164 li250.067 198.827 li251.904 198.521 li253.588 198.215 li256.588 197.725 li259.221 197.296 li261.517 196.929 li263.599 196.623 li267.211 196.042 li270.273 195.582 li274.13 195 li277.345 194.48 li281.784 193.776 li285.427 193.194 li288.519 192.674 li291.182 192.184 li293.54 191.755 li295.652 191.357 li297.581 190.959 li299.326 190.592 li302.418 189.857 li0 1 1 0 cmyks302.418 189.857 mo305.081 189.215 li307.469 188.572 li309.581 187.929 li313.224 186.765 li316.347 185.663 li320.235 184.041 li323.511 182.541 li327.98 180.153 li331.654 177.948 li334.746 175.836 li337.44 173.846 li339.828 171.979 li341.94 170.203 li343.838 168.52 li345.614 166.897 li348.706 163.866 li0 0.8 1 0 cmyks0.9 lw348.706 163.866 mo351.4 161.05 li353.757 158.447 li355.87 155.998 li359.543 151.651 li362.635 147.763 li366.554 142.651 li369.83 138.15 li374.33 131.844 li377.973 126.517 li381.095 121.895 li383.79 117.792 li386.146 114.21 li388.259 110.935 li390.188 107.965 li391.933 105.24 li395.025 100.342 li397.719 96.0557 li400.106 92.2598 li402.219 88.8311 li405.893 82.9224 li408.985 77.8711 li412.903 71.5035 li416.179 66.1153 li420.648 58.7681 li424.322 52.7066 li427.445 47.5938 li430.108 43.1246 li432.496 39.2056 li434.608 35.7159 li436.537 32.5318 li438.282 29.6236 li441.374 24.4805 li444.068 20.0108 li446.425 16.0616 li448.568 12.5411 li450.926 8.5918 li0 0.41 1 0 cmyks1 lw[1 2 ] 0 dsh331.776 216.093 mo334.746 210.43 li337.44 205.317 li339.828 200.939 li341.94 197.021 li343.838 193.47 li345.614 190.255 li348.706 184.531 li351.4 179.602 li353.757 175.254 li355.87 171.367 li359.543 164.815 li362.635 159.274 li366.554 152.325 li369.83 146.508 li374.33 138.671 li377.973 132.272 li381.095 126.854 li383.79 122.17 li386.146 118.129 li388.259 114.486 li390.188 111.21 li391.933 108.21 li395.024 102.914 li397.719 98.3213 li400.106 94.2803 li402.219 90.6373 li405.893 84.4224 li408.984 79.1876 li412.903 72.5752 li416.179 67.0645 li420.648 59.503 li424.322 53.3189 li427.445 48.1148 li430.108 43.6143 li432.496 39.6343 li434.608 36.0835 li436.537 32.8687 li438.282 29.9297 li441.374 24.7564 li444.068 20.2559 li446.425 16.2759 li448.568 12.7247 li451.048 8.5918 li0 0.64 1 0 cmyks0.8 lw[6 2 1 2 ] 0 dsh274.13 195.49 mo277.345 195.092 li281.784 194.603 li285.427 194.205 li288.519 193.898 li291.182 193.653 li293.54 193.439 li295.652 193.225 li297.581 193.072 li299.326 192.919 li302.418 192.674 li305.081 192.459 li307.469 192.276 li309.581 192.092 li313.224 191.847 li316.347 191.633 li320.235 191.357 li323.511 191.143 li327.98 190.868 li331.654 190.653 li334.746 190.47 li337.44 190.316 li339.828 190.164 li341.94 190.041 li343.838 189.949 li345.614 189.857 li348.706 189.674 li351.4 189.521 li353.757 189.398 li355.87 189.276 li359.543 189.092 li362.635 188.939 li366.554 188.725 li369.83 188.541 li374.33 188.327 li377.973 188.143 li381.095 187.99 li383.79 187.837 li386.146 187.714 li388.259 187.623 li390.188 187.531 li391.933 187.439 li395.025 187.286 li397.719 187.133 li400.106 187.041 li402.219 186.918 li405.893 186.735 li408.985 186.612 li412.903 186.398 li416.179 186.245 li420.648 186.031 li424.322 185.877 li427.445 185.725 li430.108 185.602 li432.496 185.48 li434.608 185.388 li436.537 185.296 li438.282 185.204 li441.374 185.082 li444.068 184.959 li446.425 184.837 li448.568 184.745 li452.242 184.592 li455.334 184.438 li459.253 184.255 li462.498 184.133 li0 1 1 0 cmyks[1.5 2 ] 0 dsh46.546 110.097 mo53.8013 98.0347 li100.151 21.1631 li0.5 1 0 0 cmyks1 lw[] 0 dsh210.116 216.093 mo210.116 173.879 li0 1 1 0.15 cmyks345.828 216.093 mo345.828 136.079 li0 0.64 1 0.15 cmyks0.8 lw[4 3 ] 0 dsh198.912 202.072 mo201.453 202.838 li203.688 203.266 li205.647 203.511 li207.453 203.573 li209.076 203.573 li210.545 203.511 li211.923 203.389 li214.433 203.113 li216.637 202.777 li218.597 202.44 li220.403 202.103 li223.556 201.43 li226.281 200.787 li229.771 199.96 li232.74 199.256 li236.873 198.246 li240.271 197.419 li243.21 196.685 li245.751 196.103 li248.017 195.552 li250.067 195.092 li251.904 194.664 li253.588 194.266 li256.588 193.592 li259.221 193.042 li261.517 192.521 li263.599 192.092 li267.211 191.357 li270.273 190.745 li274.13 189.98 li277.345 189.368 li281.784 188.572 li285.427 187.929 li288.519 187.378 li291.182 186.949 li293.54 186.551 li295.652 186.214 li297.581 185.908 li299.326 185.633 li302.418 185.143 li305.081 184.745 li307.469 184.408 li309.581 184.102 li313.224 183.582 li316.347 183.153 li320.235 182.602 li323.511 182.173 li327.98 181.592 li331.654 181.132 li334.746 180.734 li337.44 180.397 li339.828 180.122 li341.94 179.847 li343.838 179.632 li345.614 179.418 li348.706 179.051 li351.4 178.745 li353.757 178.469 li355.87 178.224 li359.543 177.826 li362.635 177.459 li366.554 177.03 li369.83 176.693 li374.33 176.204 li377.973 175.836 li381.095 175.5 li383.79 175.224 li386.146 174.979 li388.259 174.765 li390.188 174.581 li391.933 174.397 li395.025 174.091 li397.719 173.816 li400.106 173.602 li402.219 173.387 li405.893 173.02 li408.985 172.744 li412.903 172.346 li416.179 172.04 li420.648 171.642 li424.322 171.306 li427.445 171.03 li430.108 170.785 li432.496 170.571 li434.608 170.387 li436.537 170.204 li438.282 170.05 li441.374 169.775 li444.068 169.561 li446.425 169.346 li448.568 169.163 li452.242 168.856 li455.334 168.581 li459.253 168.274 li462.498 167.999 li1 0 1 0 cmyks0.5 1 0 0 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 12{/.notdef}repeat /hyphen /.notdef /slash /zero /one /two 25{/.notdef}repeat /L /M 5{/.notdef}repeat /S 2{/.notdef}repeat /V 4{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [0 -10.7999 -10.7999 0 0 0 ]mfnt sfnt60.6621 152.811 mov(Lindhard-) sh70.382 147.11 mov(Scharff) sh0 1 1 0.15 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 12{/.notdef}repeat /hyphen /.notdef /slash /zero /one /two 15{/.notdef}repeat /B 9{/.notdef}repeat /L /M 5{/.notdef}repeat /S 2{/.notdef}repeat /V 4{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt199.446 82.6191 mov(Bethe) sh0 0.41 1 0.100001 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 12{/.notdef}repeat /hyphen /.notdef /slash /zero /one /two 15{/.notdef}repeat /B 9{/.notdef}repeat /L /M 4{/.notdef}repeat /R /S 2{/.notdef}repeat /V 4{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /.notdef /t /u /v /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt338.228 82.6191 mov(Radiative) sh0 0.64 1 0.15 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /.notdef /slash /zero /one /two 15{/.notdef}repeat /B 9{/.notdef}repeat /L /M 4{/.notdef}repeat /R /S 2{/.notdef}repeat /V 4{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t /u /v /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt243.549 120.095 mov(Radiative) sh251.114 132.095 mov(effects) sh244.096 144.095 mov(reach 1%) sh0.5 lw[] 0 dsh256.608 52.9195 mo256.608 30.2398 li190.574 30.2398 li190.574 52.9195 li256.608 52.9195 licp0 1 1 0.15 cmyks1 0 1 0.100001 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /.notdef /slash /zero /one /two 15{/.notdef}repeat /B 9{/.notdef}repeat /L /M 4{/.notdef}repeat /R /S 2{/.notdef}repeat /V /W 3{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t /u /v /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt381.461 204.118 mov(Without) sh%%IncludeResource: font NewCenturySchlbk-Roman/NewCenturySchlbk-Roman*1 [32{/.notdef}repeat /space 223{/.notdef}repeat] /NewCenturySchlbk-Roman nfnt/NewCenturySchlbk-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt423.935 204.118 mov( ) sh%%IncludeResource: font Symbol/Symbol*1 [100{/.notdef}repeat /delta 155{/.notdef}repeat] /Symbol nfnt/Symbol*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt433.292 204.118 mov(d) sh0 0.64 1 0.15 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /.notdef /slash /zero /one /two 15{/.notdef}repeat /B 9{/.notdef}repeat /L /M 4{/.notdef}repeat /R /S 2{/.notdef}repeat /V /W 3{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt384.217 149.668 mov(Radiative) sh393.567 161.668 mov(losses) sh1 0.73 0 0.15 cmyk%%IncludeResource: font Symbol/Symbol*1 [98{/.notdef}repeat /beta /.notdef /delta 2{/.notdef}repeat /gamma 152{/.notdef}repeat] /Symbol nfnt/Symbol*1 findfont [15 0 0 -15 0 0 ]mfnt sfnt251.82 245.922 mov(bg) sh413.842 188.458 mo413.842 183.059 li405.359 183.059 li405.359 188.458 li413.842 188.458 li0 0 0 0 cmykf77.7696 199.19 mo77.7696 179.981 li75.9878 179.981 li75.9878 199.19 li77.7696 199.19 li0.230001 0.13 0 0 cmykf1 0.73 0 0.15 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /period /slash /zero /one /two /.notdef /four /five 12{/.notdef}repeat /B 4{/.notdef}repeat /G 4{/.notdef}repeat /L /M 4{/.notdef}repeat /R /S /T /.notdef /V /W 3{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w 136{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [11.8799 0 0 -11.8799 0 0 ]mfnt sfnt33.6171 233.998 mov(0.001) sh81.9469 233.998 mov(0.01) sh132.796 233.998 mov(0.1) sh183.691 233.998 mov(1) sh226.081 233.998 mov(10) sh270.99 233.998 mov(100) sh178.111 277.197 mov(100) sh135.001 277.197 mov(10) sh91.1716 277.197 mov(1) sh39.7372 277.197 mov(0.1) sh313.02 233.998 mov(1000) sh361.174 233.998 mov(1) sh367.114 233.998 mov(0) sh/Times-Roman*1 findfont [10.7999 0 0 -10.7999 0 0 ]mfnt sfnt373.945 227.518 mov(4) sh/Times-Roman*1 findfont [11.8799 0 0 -11.8799 0 0 ]mfnt sfnt409.053 233.998 mov(1) sh414.993 233.998 mov(0) sh/Times-Roman*1 findfont [10.7999 0 0 -10.7999 0 0 ]mfnt sfnt421.824 227.518 mov(5) sh/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt90.7939 294.297 mov([MeV/) sh%%IncludeResource: font Times-Italic/Times-Italic*1 [99{/.notdef}repeat /c 156{/.notdef}repeat] /Times-Italic nfnt/Times-Italic*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt131.104 294.297 mov(c) sh/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt137.815 294.297 mov(]) sh/Times-Roman*1 findfont [11.8799 0 0 -11.8799 0 0 ]mfnt sfnt316.35 277.197 mov(100) sh273.24 277.197 mov(10) sh229.41 277.197 mov(1) sh/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt254.594 294.297 mov([GeV/) sh/Times-Italic*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt292.379 294.297 mov(c) sh/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt299.09 294.297 mov(]) sh/Times-Roman*1 findfont [11.8799 0 0 -11.8799 0 0 ]mfnt sfnt455.668 277.197 mov(100) sh412.559 277.197 mov(10) sh368.729 277.197 mov(1) sh/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt394.755 294.297 mov([TeV/) sh/Times-Italic*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt430.857 294.297 mov(c) sh/Times-Roman*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt437.568 294.297 mov(]) sh0.8 lw54.1382 93.5147 mo58.2403 87.5757 li61.1182 83.2896 li63.3834 79.9224 li65.2203 77.167 li68.0977 72.7281 li70.3326 69.2686 li72.1695 66.4214 li73.731 64.003 li75.0777 61.8907 li76.272 59.9927 li77.3126 58.3091 li79.5782 55.2784 li81.4151 52.8594 li82.9458 50.8394 li84.2925 49.1553 li85.4864 47.7471 li86.5274 46.5225 li87.5074 45.4815 li88.3643 44.563 li89.9258 43.063 li91.2725 41.9 li92.4668 41.0123 li93.5074 40.3082 li94.4874 39.7261 li95.3443 39.2671 li96.171 38.9 li96.9058 38.5933 li97.6099 38.3487 li98.2525 38.1651 li98.8648 38.0118 li99.4468 37.8589 li99.9668 37.7671 li100.488 37.6753 li102.753 37.4918 li104.56 37.6138 li106.121 37.92 li107.468 38.2876 li108.662 38.7774 li109.703 39.2979 li110.682 39.8487 li111.54 40.461 li113.101 41.6856 li114.448 42.941 li115.642 44.1958 li116.683 45.4205 li117.662 46.7061 li118.52 47.9615 li119.346 49.2164 li120.081 50.441 li120.785 51.6045 li121.428 52.7066 li122.04 53.7779 li122.622 54.8189 li123.142 55.7681 li123.663 56.7168 li125.928 60.7886 li127.765 64.2173 li129.295 67.1871 li130.643 69.8199 li131.836 72.2691 li132.908 74.4424 li133.857 76.4322 li134.745 78.2999 li136.276 81.6368 li137.623 84.5757 li0 1 0 0 cmyks[4 3 ] 0 dsh54.1382 97.4947 mo58.2403 90.7291 li61.1182 85.9224 li63.3834 82.188 li65.2203 79.1568 li68.0977 74.3506 li70.3326 70.6158 li72.1695 67.585 li73.731 65.0132 li75.0777 62.7784 li76.272 60.8194 li77.3126 59.0435 li79.5782 55.8599 li81.4151 53.3497 li82.9458 51.2984 li84.2925 49.584 li85.4864 48.1148 li86.5274 46.8594 li87.5074 45.7574 li88.3643 44.8389 li89.9258 43.3082 li91.2725 42.1143 li92.4668 41.1958 li93.5074 40.461 li94.4874 39.8794 li95.3443 39.4205 li96.171 39.022 li96.9058 38.7466 li97.6099 38.4712 li98.2525 38.2876 li98.8648 38.1036 li99.4468 37.9815 li99.9668 37.8589 li100.488 37.7671 li102.753 37.5835 li104.56 37.7056 li106.121 37.9815 li107.468 38.3487 li108.662 38.8082 li109.703 39.3589 li110.682 39.9712 li111.54 40.5225 li113.101 41.7164 li114.448 42.9712 li115.642 44.2266 li116.683 45.4512 li117.662 46.7369 li118.52 48.023 li119.346 49.2471 li120.081 50.4717 li120.785 51.6353 li121.428 52.7374 li122.04 53.8086 li122.622 54.8497 li123.142 55.7984 li123.663 56.7168 li125.928 60.8194 li127.765 64.2481 li129.295 67.2178 li130.643 69.8506 li131.836 72.2691 li132.908 74.4732 li133.857 76.4629 li134.745 78.3306 li136.276 81.6675 li137.623 84.606 li0.7 1 0 0 cmyks0.5 lw[] 0 dsh47.733 262.084 mo464.818 262.084 li1 0.73 0 0.15 cmyks47.733 262.084 mo47.733 254.828 li1 0.73 0 0.15 cmyks94.0518 262.084 mo94.0518 254.828 li1 0.73 0 0.15 cmyks140.402 262.084 mo140.402 254.828 li1 0.73 0 0.15 cmyks186.751 262.084 mo186.751 254.828 li1 0.73 0 0.15 cmyks233.101 262.084 mo233.101 254.828 li1 0.73 0 0.15 cmyks279.42 262.084 mo279.42 254.828 li1 0.73 0 0.15 cmyks325.77 262.084 mo325.77 254.828 li1 0.73 0 0.15 cmyks372.119 262.084 mo372.119 254.828 li1 0.73 0 0.15 cmyks418.468 262.084 mo418.468 254.828 li1 0.73 0 0.15 cmyks464.818 262.084 mo464.818 254.828 li1 0.73 0 0.15 cmyks407.583 183.253 mo409.703 175.813 li411.967 185.747 li409.493 182.876 li407.583 183.253 li1 0 1 0.100001 cmykf1 lw4 ml409.77 179.757 mo409.77 195.208 li1 0 1 0.100001 cmyks386.157 154.885 mo363.633 167.217 li0 0.64 1 0.15 cmyks367.92 167.399 mo360.416 169.283 li367.887 162.355 li366.638 165.933 li367.92 167.399 li0 0.64 1 0.15 cmykf0 1 1 0.15 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /period /slash /zero /one /two /.notdef /four /five 12{/.notdef}repeat /B 4{/.notdef}repeat /G 4{/.notdef}repeat /L /M 4{/.notdef}repeat /R /S /T /.notdef /V /W 3{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w 2{/.notdef}repeat /z 133{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt184.588 159.911 mov(Minimum) sh184.597 171.911 mov(ionization) sh0 0.64 1 0.15 cmyk%%IncludeResource: font Times-Italic/Times-Italic*1 [69{/.notdef}repeat /E 29{/.notdef}repeat /c 156{/.notdef}repeat] /Times-Italic nfnt/Times-Italic*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt335.211 129.671 mov(E) sh%%IncludeResource: font Symbol/Symbol*1 [98{/.notdef}repeat /beta /.notdef /delta 2{/.notdef}repeat /gamma 5{/.notdef}repeat /mu 146{/.notdef}repeat] /Symbol nfnt/Symbol*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt343.128 131.831 mov(m) sh/Times-Italic*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt350.595 131.831 mov(c) sh0 0 0 0.65 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /period /slash /zero /one /two /.notdef /four /five 12{/.notdef}repeat /B 4{/.notdef}repeat /G 4{/.notdef}repeat /L /M /N 3{/.notdef}repeat /R /S /T /.notdef /V /W 3{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w 2{/.notdef}repeat /z 133{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt61.7556 187.378 mov(Nuclear) sh66.7801 198.178 mov(losses) sh2.5 ml268.291 148.499 mo268.291 215.729 li0 0.64 1 0.15 cmyks1 0 1 0 cmyk%%IncludeResource: font Symbol/Symbol*1 [45{/.notdef}repeat /minus 52{/.notdef}repeat /beta /.notdef /delta 2{/.notdef}repeat /gamma 5{/.notdef}repeat /mu 146{/.notdef}repeat] /Symbol nfnt/Symbol*1 findfont [15.1199 0 0 -15.1199 0 0 ]mfnt sfnt91.1894 69.2793 mov(m) sh/Symbol*1 findfont [12.9599 0 0 -12.9599 0 0 ]mfnt sfnt99.901 63.8793 mov(-) sh116.478 63.1836 mo123.932 65.2554 li114.013 67.5845 li116.867 65.0914 li116.478 63.1836 li1 0 1 0 cmykf103.085 65.2618 mo118.924 65.2618 li1 0 1 0 cmyks63.1451 206.126 mo61.0738 213.581 li58.7447 203.662 li61.2374 206.516 li63.1451 206.126 li0 0 0 1 cmykf61.0669 192.734 mo61.0669 208.573 li0 0 0 1 cmyks0 1 1 0.15 cmyk%%IncludeResource: font Symbol/Symbol*1 [32{/.notdef}repeat /space 10{/.notdef}repeat /plus /.notdef /minus 52{/.notdef}repeat /beta /.notdef /delta 2{/.notdef}repeat /gamma 5{/.notdef}repeat /mu 146{/.notdef}repeat] /Symbol nfnt/Symbol*1 findfont [15 0 0 -15 0 0 ]mfnt sfnt195.169 46.4395 mov(m) sh/Symbol*1 findfont [13 0 0 -13 0 0 ]mfnt sfnt203.812 41.0395 mov(+) sh210.947 41.0395 mov( ) sh%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /period /slash /zero /one /two /.notdef /four /five 12{/.notdef}repeat /B /C 3{/.notdef}repeat /G 4{/.notdef}repeat /L /M /N 3{/.notdef}repeat /R /S /T /.notdef /V /W 3{/.notdef}repeat /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w 2{/.notdef}repeat /z 133{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [15 0 0 -15 0 0 ]mfnt sfnt214.197 46.4395 mov(on Cu) sh0 1 0 0.170001 cmyk%%IncludeResource: font Times-Roman/Times-Roman*1 [32{/.notdef}repeat /space 4{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen /period /slash /zero /one /two /.notdef /four /five 11{/.notdef}repeat /A /B /C 3{/.notdef}repeat /G 4{/.notdef}repeat /L /M /N 3{/.notdef}repeat /R /S /T /.notdef /V /W 2{/.notdef}repeat /Z /bracketleft /.notdef /bracketright 3{/.notdef}repeat /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /s /t /u /v /w 2{/.notdef}repeat /z 133{/.notdef}repeat] /Times-Roman nfnt/Times-Roman*1 findfont [10.7999 0 0 -10.7999 0 0 ]mfnt sfnt77.2873 94.6118 mov(Anderson-) sh84.4908 106.492 mov(Ziegler) sh[1.5 1.5 ] 0 dsh120.195 60.0547 mo124.267 63.3916 li127.175 66.8204 li129.41 69.9429 li131.247 72.8819 li134.155 78.025 li136.39 82.3111 li138.227 86.0152 li0.79 0 0.82 0 cmyks%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Gradient/page_trailer get execAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Gradient/doc_trailer get execAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Don Groom) ()%%Title: (rpp_icru49_cu_col.eps)%%CreationDate: 8/5/13 12:02 PM%AI9_DataStream%Gb"/L$^2MgP32]DreHB@cp^$>ROl)Pc.tgMh/':GP,4Ar1Rdu3.&^`LigNU8n0(s+lgN"b4TI[qPc_>NG@OhAAl]ZgM9HKe6iq](%@'n]AVR+7rdIQIUL"1lrTeKXa3nW;A#QHi3?EJERqSEJ)I!mAq#'8J,g)7P3qF3Jkm;dKY]r`'>B<1,g[9d2kkKDEP@<(gWZ7);<%hVuYQpe*K:00^/Gq;g\9jHZe-@KY3MWt-$A[U"</EV")IqPWrJbM1,?I/d*Wpiu[^3TjbQB=HDPGne"Xg.^Y8S#"9sX(kg4^L51$%8*8@PCgLC!=1=Af@J_@ue19tN%r:eKSYb3gq9e26^7A<Nd+)n-kSB62oYA0"hd9?P%A\oZ#ul';j=fDe@KX%;SGi5qH95>L<g1dE%\bPJL?lhM;Z-F09h'CEG>(#E?%u\Wrc"&on`5WK3(Ok1f;fL'Sh@X2@0A3(9WtXad*aeKa\\S5M^p@[?oWf0)[q27-+n:EH`Sib6%1TI%"F'[VYbpT!<[7cdn:r,%SCCWnHITe-s(bZ807=<[#>4m>FI<\llCGhM\X#NMbe`Oj;mhcE_n4Je)qKtB.<^/-IU^TA'+j0;r%Ea$^0(:&A_C-LTRg$M:?\=TeY<Z@FHEkWh+4tM(a5PfhUqfq\:,*b*lJu<hCid1DJDBURPQ.d%OoR5c4/S%(jV$`o]/OV$S'XoL'%KUE-J=3i*(bGWdeXJQV#s'[IM6(=IKAoD=?LFaq+&G>>AjK;ZLYAQ6/cU!<L=G5l)o-``nHj-n:]RH.<o@qf3g8V!6Ko^_g0`"!/%':M.j^C]45;_=_9Nu-9'jXlH)eGd8i9"]\/c^/S1ZhATlK'Kdg]cVSN%0!\@DQ5SZSl\@bK=@o'ql14U%u/P9[DJ.#@(=)6_$/%t%2P3bLj2oPh;[pIubi[Ahn?cWi%=W!JQpd5HQSt5dbZ7Q52tQ=t_5-+Jmn^I_S#5\4hs:fPphH),>.(QZ@e$eG1J;t)/^K$,mgYSF%G8Y[m$1G1]?,iaX,O77nDEHG+@,(6I-Z@mCX2,JZXK')Gj?6U`Wn!VcZ,Z9#8I)H.o6I_]&.YA7]6=@i!K<M^SjQ+#`YXjt*S`47%5!kIiD$IeFBluL?rA9=IBWLGPQCDU]AhY28T!%7?ot+O'\smWi\$O&^@qpIAX;6HCm4PrYa4L5oY,6+e'K')oo_\#dIC#KnQ\JoM%H<pF*[agg-3F.)9%'#q<k*'$K("tOWREY1fqpl_=qeWOpN43""F`k=Obc<[lmTYnY-EPl@omD/m+<M$P?jpg^X+-'59@AsA'MTKF%\,:jn)'\30RkM$?rmoIAEB8G2,6_e8f#mnDm;HoDP;o;sm:s`pAP6alc/6%@hVcWe*Nmop2%KZlZfRDcKZC[1Ze(C`eM`N(J9CI$%\QqQkH@oY#U>t>/@FU6UgUM5;c(dgZPcF&EQK_7WH5`3C-KR,`IMt4qL`AXT`V^8h9kgESle*D+3tB3rjCUjWNd63/-9#`PdA3O+%pBL)pMmno#p3&XQDIA7C7J5-fAqKc'f40P=o5Ch8f9ft(2W/#6EYt[nMjl$g6k>2WLE27^I`@G$,;0IcPS;IEqVPfE^rrV?@Q7Z-%Y-("G<@9^_3]N+kK;QTE"uSQhDhk@(?>Vp1VSmu,Hn!R5Hl]#!?bH*rXlZ]i>CZQ7a>ct/_2lHj)I_S+WrY&bqV-0K`tph)/`$K,%2BNV1,OK"G9OH>'m#AaOKGOcDJDnah17ukK]G[A<\*TRnmT.Nqp')X&6\ubNDG[tVK;Z3/gI]d+_$kk9"DNPqDD8W=$U<7F#_$_q%c/Du%TkbVKrr'N6]WDO?94FIp=mCQf[5[Zb(bMJG_(ttT.Y:P^/C&]H/1.jV[!5f=rhG-FV9Cm3UJF^\/4NQ3k5VbhqYCm#1ZZjf%T*p$!nJUA."n/?'oUj&l$&t!s^o_PeQkr$snJR/kES2"l@P"ZmM3!`r.]MqmdRklM5!]\?87'A1I)b_LPtEI(Pg[_4A!Ku!"Z97(%FeLG<=C(TAM<^m;>&0n<TY\\7TSIih073_g]$U@&l46s&.fSAnddY<:j7)<EH_d^UXKRNYReJ^ZDn3Wf]A-glG?Aj?A!a1DTnbhP%?=1WW\,AeBd=i2T;*9(\>%'tE^4NsDCNqRF&U`It/-,5<7IS'nUX)GG]N_C>AHX"P^6FYl[r3=8MYBT,;70e7NFI<rY.:==jpp_2%4kc4dRl[]j4Uf-FJH=uQ:\rXVh"X'mlU@)nd5ZKf`pN(sWce($?#QpuBtk,O41DRlpJPL:[BGps?Rp\,#3B:,_]l!Y/5__Ddd96R%dl>aAb(O7Cf090+)AeEK>kn=ej5^f34%\=#j,Wg.e(SsZl$@L0Igsin.@g<.oM(6RqM$BtS5'$WB%,,Yb0/hOC&RsRRn^:OWb^ml%f_/*Wqr67OFJYZ1\Pi2-_m\HLV=4gBs(<j`NNk>/I=I$LT"8Se%aD4H5.P!*?&c$?Y:ctI=2V(XjfdI)]eW[c8jQ/1WZ5B*a5bA5%`HX3\Nl0M1h:Rb4=H=2i8rUs:X3:%pjlOJCk]1nc/q*3:?.qqmW@o!.9O*l"<u9nTbDV::dDbT!>ke\N@5#iY^/,XWED_b!7cVnX%k[H@e%7ajf7rDj-Au%q3,VdAODg4,Z%ki\S_pNE_$q!7$6T[+l4]E8!0eC4B(l-:R&Op1G6L_ep)beUE!E_c=rKSK%97PnjIcuFY%4n$&V`bUVa#ms\D.lVX<m_Xt=cirU'F4M3W\q0ti=5#/d[[6^)NpP*sl`IME)M"ur&o(SCb`s'8964N2AnZed`YiQNd4d!Uh(A;b%*pZII!L"D<F?E7<_O*0=9#A)1FTkFMKZ/pYGsV6Ibg=3H2%3DM;+mkS(oho`,p'pV4nRGp__j8Q6L.9H^_iAV!LjqC3]nt4_IbX+%8&CE]!cJJ^ltcfoK1KC*(,h#L@AuLaZ@^X/TH62Ig/4NF,(=="[bj<GaWRC*I")&$"ofl%K_U5o^c!:te[d^7DR',Di%N'ehV!t_%hV_bU.0e\I*f<2S"tsStGOqhC.>t+;B%-&nr:[eTf]m[oDF<dP7st+kr:6I&I404-V"jJ`AMFA]jmsP\>.pI"#1"W0>k,j@0gN/A%aULY!]&qi'a(LT][FnO7LhEo<a0nF98aG4Sp"<(:`_X:SMuQ45pOrSG$ig/GrQT.aQbc-b`'OmsA$Q'DH!f(5Kh4.-,qVc^Talud%P;7_l(M;sTGh]F`g1tcI7XOW1Xi,t_H)2N[<a<MnPh+G0m/t)iGG/O3Mh>i?iA7mA0U(aIOHu_Vmne.CMTSi/>S^#EA$T("hIR=Z%=PFF$RUo[*B;8M`)QiiU>C$^s8e#H0S!i6%(p,4HUDT;n@fBS+7R9,ScS""fH8a[Or4(P=4^,L$p<ImjTm0%r[B%8FR+UP,0j8GG%mu$GmErJdq1XqIp.J.Se8\%&g#C);rh\GdAb'n?Jm5n9frhqFI^`/oIiF4R7cZm?LG&sUN"4,`5NkP>3$ErTU<RmAN?e_3F('\Qr%Cjk'[+JEnlhkq&'W-Pe<Y1mFFf<.i/BC?f!V[J-J/6B=&cn]aVG[J^^G=a/db%*4Yr]F?>*@mFZpL^k$@K9bOB:Gn?L?7eC,qB]`%hG*Eo]Z9gS_l8X.aXF]iCaPOm#L.HdM"GQ(]<7@Ja8#VpPK2Q6V\O\AqsW"&(K9UW%;ds<B0Y;!(LT5#^W>g?#4q26=,3E_T?Oc%%6RW/":hTKHoC8u43Z,##P=$q3XYu@l)ZK%A+F[GqhG71Yam1r526FWJ7f;[kpar?3a,]?Fh/#8\<K!;Y7r8o/i8AADHFol*rdc0i%@D=H+f+W05aWu>qJN^P:H&LpXqjVm)58NQd2r"";H2GW,bXn;cD`\A%+81JB+$=q#>5+\Fl`[^;e;$8YU5lub$da*rlh;rlqdfAG%`]:3]lP!:PMg]0(05l<>VYBh'Z!894_XH-dVY0tS>4<D3n220.M*fA^^4,\4GFJWbo@_Cg'@S%IjMc/O\u@Y(ri>D7Nm?P:`$UOp%n@Y46^E-*6"E>OPm7_jDiTodRa$[Q90Ult:h:j1ACgS.]Q$'$CqgPI"<Kq3DDm,BZI4q`#b.?-1I_T6nQQ%o>O/k4/QredP-5M4G%(AD01fCh;qPt\TQRJt$8g+PD@I%eP-i<MhsA!EtS2gc<sa_LEn3E](7)a4ZUMH/\^h9/CSY)<s=?akYXgG/[eX6^aD05&^`H[/ue%c*I4_\TZBlc"aOdhb>6iRuaLc2D*Ld^XqS3NDUAL*M'(D_qXRKpD.LS/'A.HM!=/IF19s>cR3h)@eTP@k,LKn<&`-6ml[T#n*YI2%=!*l^5bI<o\Y`0O]30W]ooo2f]gKB%XFI63@%4U[9r=IO5($<<\!ps`Y"#_Hh-+ur/De>*5*3sFq9Il!2]E1FlcFO[\Cm3Xp<%Ef%TbAHcVYYRZ)WuFQ>5m#"^,WuW1S<K3YUOJ[F$V0XQAaSUn%<YLWn,_cI8qiU=0"E?%CW\KdG-9SdqZHY%)q0%jX,=*;KZ+n]Ae_$%Jm5TeF3q3FHM@)MF"@hjdTNPo3i\,/o*MX-G@6IiA5qLhr@\WIJ^?rQ`T,R`1Zg:]2oXfG`6QU./H=\V-+Xe9?\.s4;+bpM%Ze><%)Yg=6(.6g7qp9]FmA9;Vfe14:p1\C^rGgd]"3kI8d%&NL;%2nghQL`kZO3o5VCYG]gY4gK>!24Uf=+)(6_sG#`s54`gfo0?`(H2W%!9tRG;XkV;';nB;MbcoB,?,VblAa^82gi#c5j2/lHueP[LB(PIp9$'U%hOB?U0ftA%as'TkIhJpo^4(:/Rk/P^FXMk/UUmuI4_^Q%kmO2E%XmSq.aGGaII!FR7W3Y:E3-1Kb]kaoke!L!_+cJ_7rq"(PsH*;DgUY>GmT86oK1jNW3WV&ZQ8r,k2_[qT.$*rTXE&P^4L#g%UE_"ro6j+9cCdF@iGtOu/c3Aq#kLh=E$'P+V<ZaQn55C;E(q9/nPM4Id*Bca6DS4;o2Sk'U-1a5!ZgQSq.D+::qCS=mAUTFUtt"<%?6>u6U]MmCJ8+?q<rc/KF<+tWNB[l8d^rtdeg]pjiBK4ik=TKMeMEbZ:I`J"<S/D>]n/bp$g,`5%b*-Pr11+%^+Z&K^Z!P;8cU^S%k[m?jo<tEjKC1HBb(t\W;\XcnJ:&7C!ldNmp&Glp.g%Yk9]cm%Lcm/*L<;=L:iJb;UZ2Na!(uLj*"kNH;B#Ge+ot.d=H$Rd!Y'!j%\=ou/Bd]m1fhm<+0VHMfruD)l?,9J2K!big?l.XM"XQ=YqbXLUqKq=aNgECea,K8s&/8Lf":R<h]0V#=VCrW_5LG+LQAi@p*flRI%839BR6ELLl(_erceiT+D!"*n/Rp&p/F.uaohuX*se,^u-\):%B"Y9X*lkb9U#=5(]iAZGlj^__a8n9Eucut3!g-_["S-&4p+E3]Y%[=rb[$O#6EKlTq0$;+1hNAk8N$+.)-hL[uN'Z@`cMS\375MRQ`s)0q-FMF*[os31%<+XaL-7B'[quQ>V<bg7THe6Sik=,OS4c/3f%eeZl<]sL?fQ4n+Brh!M?X;kp2(F"P+-eY0AY./pJ"g*-YJtbK]J#Db)?;0R"W%YX)61]$X+7J("fY1[1*Z!T#FRHf7(Pf7!0-AZ0%^X->;!iSDrJbns.FmnE?jpi3Z(N#_+lMYd"K(s2R9R8ihf<-L6`hJrDd,OA8<8?AW;WGf%k.@2uM=NX05P36mCmU(>G"LYDmHljO%p!6(qlp"PGj^liOIX5,SW4l%4#hY0AaRHaY=iNOT'\&W!r]E-d+X_%k:3pR4`2_el!#[qsBn8i0Qif4<;9%fkK`O<,#acPW$!W5'%L##fK:Cd"Lljhm'.`_VG:<UobN8!b5QpqHZ<](rIZPT+mh&XJEn!5'"=T@n_or$fH*jM91,lN3fPG74A<$-PmeFcKVAA:XVcN\=f%H<^SW:?]tTl9!;BrD5a#`KQl)oZZMo>AedW3hT&81hb`md1aOm9;?(@g!O3_Xt1l?!pegp.\Ca)[#>[tRPQ^0S1Q>Q$p]kORZ+SL%V47mCVkqI\eBp$Hn,(CeN3OP&Hs!*7"aP"m@n4^%4\\#SAXk>(j_X%]5n11-R)lt;jd\.\)AI:_N^iSg7r()jd7?5Y>/o5d536Tp%).t2iPd@3_S?:iccAn31etPqX)cFi18j6\MBGkG-q384^V4<=B@"3hb:1`@q$Xa0YL43iJ8'6T].Em-&iG0ieH!"JlO!QUPl*u%W%BfW)qe6.oR2RJuQ!^i4]).u=[3N5T#gPiJ4m;QNkAYEWPB2-Q0[>'jTS?npVE"^+$S2$1MA.Ir9-C7Rsb;n8M/T]3lQ?1KM'guAR%6d#]IULD98:H2Q^cA>n#k[_]dcuqB'DT]JZZ_liS;Y6fdor-hcBKM_$@I<[?)qkcLCr#1uf;+pt'O,,NfoU5<)uAE#%@8h.Zooth%F@fc\g!CpU6g\^a`IXHA(i$M/`(l:7"b8pPL>'>u)J[H_>&%,JB;n@0`D,n!bYgOJc;HaLe5ABRc;HaLe5ABRc;HaLe5?t*el!1,%`)8\Bc;HaLe5?t*`_mJic;G=T\!G`&VO#qUG*^j%VO#qUG*^j%VO#qqA7qknB4e+`B4n1aB54CPB5=IQB4@h\B4n1aB54CPB5=IQ%B4@hHB4InI@qVb]?YcV]?XfuT?Y?>Y@qqt`B4n1aB54F1\hEJ`Ob`1Z&+D>rhaodi)S\i3"a_:KDV&PQ;m;:Z0ue5N5&fcM1=3`D%/hjDF%#lr1K\A)5K]s%3PGJKrBaW$f'E*5%KjgF$3tK)W=4Mm#=,EUX(fepV+%+%j#i@:f(VE`!_FIen$O]I/5oS$i+!m5W6DLO&%\j$*QVI?1#W"'3e_^`hd1a-7`X6<*f@ni;O=WgS8:,8#(1Na^?rJ%U1%paCBNC7M%Mt>:J\gLK>\11B2%BWN[k!qk&")bCWjJ'K!%I6Vu-0aU+lee/0p/Q^L[9$:+o1+<]eU5A$Z8LOgPNAcfnVs)\=e;>:OlaTu$;D\F,"UE$MIM4o8#U4R9&8.dfLfP02@0\$^,T)Zn%&e(?\?)3n`=:*CV[Rl<>$<'8<:^20AYriGe(N`NUM4&jd)&O_J#1+%uPc[no\I#cdN5BZjQt\%QpLKrR7f>'?=$*-R[q2@41s]W:%&knN@BGPaC5W%\A?oACG/]lh(3at'oa>!0)Y`f(qB?c/U/WI%n9N)coVEpL3Jd%!BB(/YK:>fE:!R]7TY/;^*B$3$/@lGB$#bW2P%Jg!uPTT0RIkC]^D;dQg\?cFobC5OEfUnRJ<fW9A*CE9oEd5NseL51:9mE;07V/`Ss-onG?a<G&^9S7MX5i#GfPifUgTW:5CAq_U0%WD]t`9*/*)'pG:-Q73e,-OQq*pqT7*0V:'OoRdL5(*_h$-HVE4!G#\u,))6#.OIGTJS>lo;K9(e\i>7i\QT+!+p=XV\m$'r'9Q84%*#T$MGdM`S0!/NM/K$+(,X(^\()VB4N"OF6=mpIg0r:X,6*t$/-Xa#*H4sl6/HALT!#/QaM9E+[Q)9#R89:(37:Ao&Z.NQ7#8#61%o&Nuck_XO'71=TG'KI=@;%,sJ6;DjE,a\T+bWnC88L?mj_BmY^eJ8SBq#4`s_5)am9WK0cAM&RD24LP(n%R^IaM+5Qp,T@[K10aG%Cc_o5&&q%AYcM(:p:qB8?cae"SEnY_IKg,AfJQQujCbDkJO,/aKK4qZ"bREHa?u^'\W1Y85Ij-XA773UPd.7$iC]eVSoW.J<=Am;%d4i.h3Y)(/,pT>-E*,^#![_blhi"AB;HSNG81NVp0$2pZ51IDfV$Z*o".7T9'J*H_NA!jMP'6s%<C*+QjKkP7`k*JCl>E%"QtH*f%Yf`d[cr7'BHJU/)%S3LC:-c4oM%(AF+,X[`04Y6;g^")d:GCY3If]JEbqI0P&Z.8MX!6o(#".pnB0T6D*W&3-VP6ilm=`pWS-UqW%XK.fP%LRBC*n92&RKJ?o&.UVCdj^q.W_^4k#`[JQ1uMa2ZH\;pRmAmhOnQ0>6J2T@`Y;K$*2[^7Ne*31+X*gg+Be)DB]qWb#]pmC%/ct>qC5T@'+qsZiBJ%I3]EhJV]:EWBG>#Q9,mAHCfB[*r'''s'Z;DBq,O_.S/JnN"6A&u/#*Krfa@rj+Y+`u(?'&]sV<$T#QTS[r%6kTrlBI$Ke;[7@8.d@AF)r;4m+JD4pcoc[&]-JLS)kt.e4`/'F?D3*s]>tb$LRMO,!$s!9ETde,?3I.!'M$\_hS[PjQj,^[j<P@G%\OZd4)G4puULc.R&In?E'j@GoUCe2qjYR7rbQ*BmSD*'t\`DV"ms:4WoHOOd3>mZCNP3(`K\'>,jR"mtpKD@/8IY$W9<FJV+ElKP%CF)6LVkD=?+TTek8^4Xg]k&$tbn-OHQ7eV2@tsb)W&X?aL?/9Z`X'RB1IGgXC<[3M/5=:B&>9PP8R,k`0Nb9Zc4!R6JMDt'L5:tI%?-D"7an7>GZU@ICQPR+X@NpBlQrtVaEZ&D*M51Y[k*Dr-Met#mdkpD[B8JA<@\`L<L?S,c-\]JM7F\Zf&BUPV-Rgc<GX%T>`jM<l%]EV.?OnQn3UMC=d6X?JGUkT/-Fh<AVA"4Yt7$JR06UZ\T4,Sk<68coSQ<9k>[=u#S#dILHB8O'=+gXT+7kZ3q6jVK5>,&A]/[<7j%<Tksa#&;a$Zh7VoUZHt*U9V\eUFB&(7s\C##1HW?13=QHjtHKX\OQa(O4.Y!d?$nObrluTgg9m5V1F%!Sok^5"s-ZI,pY+&N/OIT%V'3@/mrf16k=IN@$dc,$L,t*D9IK[JNPhLE^30toc$nc7_ZK#3N*]$?Yp:r(l`ku;)#67K"XND9d6!*eZpl=C_ZHrR+ffTb#dU8I%+HU85DNd(3T[h=d!eE5%m6G(Hq6^c)]?a>p*<`*AGi:RP7&[7JZ5j'GJ0<"@K0[duM09F9RYdfq5p0k6R]qE0E[^6kZk-=PSj\r_%+cobI-::%[N/l1^Mh%J2;WJ)h)R$5@"9]/aK%q.c1"J-JMh"3r]@$I!Cq)P<#b$drdR#)*lE2uU82Ma#9d,U3^/ULR68[Q"9d#N[%BV?Y%2@rD9/EB\3,a,.=d3'RZ/?C0e5^(67d:a(FY30U.J.r.EO\Yt=BQSf-$@kO^^rmDlM5HM4n;et/Y"A/EBQ]-*`BU*Ij4N?5%dfMJ\#YIdlCLCG=F&^d'U@Sd8=N2$fdoo/.oIOK34d9q!=!)G'?6hHTIFn?.T\,oL[h%FH3)R[9)!F^Cj1L/]P.:l-\q9M[i7<me%[YPp4FkJY367HXL)pGa*>8f.s9TV?M<@ic4T-E/+D/"m*V0YA)c<5)K!q[W/-jc/8&1[)WG+fQ%m"$LW'$6iN/5cNtO1o*:.1stZ%b9A5=Xc8Pjn$\>k)'aB/UkEn7@rSX[Q#Li#gX:dJ]$Nn_.T%p=2%,]52U'U'9$et"K9BN=`6aBf-WEE0d5ZuiTb9l#-\hRH<8o>3%+GN>=:^KhM`;-MCPu%H6cDt6L":o"dVN$k:F)hpE+e"JGe](4[7<*_/:^N8Q#XB%RiG#\0GVlZ<ShTKW9+rgIVoL,dP"p?uY_6\M%OXKZM.'Qpr79\"=@pDf`SS-=R&N\74$R9bb"XIhc)\^Q72cEu@=\rYZqV8C_'YN')QCp!h3qk0l43P+)"i460d;-ds6_;T.+NLlB%XEH-#:mB6&$BRT-]?[UqTJt8W/eT@Dge@hnjNFkSRfl&WK6Bg/U^cH5JIkO3MTbo)>.j)Z"gi^^BOph9>60lrEUI]"$<eLi.QY&5%gF);f<WH^G]<\`%j>saO^VK0W"!!u5SV7e-\;8?*euPGq!Oq)hJ6#1C40J]BYB:oF_#+3"247O.7#Y<YK%d#J*o[1%DI2X/aKc7!%[9a"U?sMa"?3P#Y\BLoP`&C'23Ye<%D=[`4BMM$(X*#m?lsDDG>GhO<,7`"s:'GKXLq%PBSI.qMHn&Z%"iN"XpfQi]&8&j\C$S`K%jJ1JXq@m$?e#g'H:EetY<HQ>dT0a137\R1a"_dSk7H[Xs[S,sUk>ZD":7KJ,TY1p*I-O]CT\2<:[pFb6ZuIGa.\K:SB03:`;O#nr%?3RqH_Id*XBH_90FC#,9ZX2h(?A51b<^G6aGFIM<ctRTnQLiH4iHI'Wc7uUOLc!;7c[7$_2s*WDFu%GNU*p\WrctY\RI2L;NUC?`%+_EC!4e=7&mj>+"3MiQp=_T];PbpFDH-q5M(H:9!oB*u=5ao2g%'3kEhTau:OX$@g/\+l&2[>D@im@Ze2mcX#e+r8KaOlhV[<YiE%fKN#>72r^+>"F95-D%ZMM<2b324m[AZcQhQrmVjOJdL-BpG;n2qP5%YgHgOp4.91*eI5HaL/+"**jFqSS*GaRbGIDb]Y!0-VH#La%Guoe,T?9dee!e!2GPF;pA(1'<#.sqKNY'_J:HR;O%:1@$E?Fp#d*PpGog)dQmc+E24moG5V(Rt4mAuAO-d6R+^0!"EQqNn#;sbIo%OOj-4UK)f8dD*,uC!o/*r0(NjOp\u0*Fus-%4?mpoW2`_XoDt1QBsK9!Nb5P'_Ea/l)FMP::9YWj$Ba?+?j#!:,fJ*e.2'uEAe^m%?`r#2qGa3iG06!Gm-+8eSSgCeFE!kn2t)E7W9p)WF&'=qPbu&#&?ju?W`dR]_qNM02EQnYg^?cUWg6,>\3QsH.0G2)%L6^m]8mJe%pUKr%FsHf)enK$SV1XMR(K6]OFA/m=8W#;LXQ?dUGf<PB_#[a:lJqik\B6AmS/bQ:?=RH@c(lA1AoBJQ;Xc%]V+9Ln!K^5Ydfk+D%_ccL7)b9mPei5/We?UOL"\Ttb\82KSmhU=labCERNg1$j8eq0_1jr\IMSj"o\;![M4Z-Z?1<)r/4ZHOt<Y"5/_5ESm#p,7m+"1WS%UEEpJm#k9:i>!C_qc=%k(mISgF%;,eV;k(#VT@(F;XUa939:5HOWk/<mA'j!7+/!UK2tcM`jiot;nYXBO9]CMlOAQ90I:#^TJHi!%8K@J"l,3^MSEkD.Ll^/Xku6@'A_`t?Xj*JZY\*i@gI$%^2UPhOXg]RpH$$SY@:J&Dp%U1$)\Y;)LLCC4O6V4Po>%Er5^8_\]D9\"%0P@";#.(5d>#Wf86ngWH9KrW%BX:a%O7hU3LX=jrp=bj%*GTW=W&p_$j=D8A9D%<3a)A^B'ep=o:$[f@lu/UBKKKseqXPOkVe*Lg%*<*5^_Y_B<*H4\>'^^AH?`#!u^V>N!GNHb#CY[6m4!;dn3a^b^6bC`$T"U8ndm.Q+BN*8uGXtZhW?aY7dISuDOEIQ9"ZPc&+[N(m%-+uq43Y(B\/Gl9A@o4Z+QQad67?IoaAB):nTd[q^'=m7:Wo_YC-+fJ-`'D^k%UTQ,&O<0Ab.M2HVX4aPT;?5G`q`s%rYnJk<cl(Z%Vl'np5pe,0\j#+H1_[4^H%#'>;hXSY&W.(B_a+DZ7@K::<Edid#Vs+ekIsYaST(:`3Xi-(l!>CQA.cK7K"q3Tmh$9K.P4B]R=Y-m%E_Hk$o;;cCs.&o$iR<NnlB<6Cmn2O+@VK41GJ]FQ3=V"/da`KeDL%%TTc4>RRMR0r6JR<gfW0,!c'H5:ANV3de7!(7OP<).'tcD!%1r'4DlhW@5*5`HmImd10Eg%pUMbj"sL?=2YB),=.C8^[.$?S4MK/RW4VWao!Nc)sqePZe=/dq<Le9-%#*]hZ<%aF6J_GNk8'X8,[%]>9sMFC>>d]Jh.,N%5V-R'S*ji$amA,#,'Khph010*s;/Ym>"%p'Qpi$B^<k]m+Y3iNTkcrAqYsLP@e<>dR;JPu?a'VlU3Y_fK's%8RWLf$Fi"N:o/8'7E#k6ID(eYV(8$?e/kf,lU43ZPaheBQ[*T;#]6VX"XQ,sq@4WHS/*A4RAtCD/fl$T-c<tip72N(-@%ln,AGS=%+)*@1%Q#`@:@08E7rW0@JZf@[/_'_BpGjR-$JP21e.P2QOAY5K-0aYh.84'j7&1)LG+0#-#T&CDIuY%hd3blSHk`Z[.V,ZY7'!^_%dtrmDj4AnWJ#H]4-pNO^:2(N,ms1V?UU#i62afJ6g,cA;O1)i0[ftW+(Unpo\3cJ@-#GHW-FS/%L(52-^f2"&Z8l;*Y`p:99[Sn-%koF)>9VpAB9\=lP[atOl$%B!t^n_6c%=9[9C)UHE+XZ?<^r]h%@Ocu@BMp9ges_^&-L=7aJ8+#qmf6sjCR+stDZR?O9KLD`UUm7O%#uGfWJD#N\!gl%2Y%<.:QsU2fNA7>]BhdEL">CcN9``]K@s7r0DTHC6=^%kM!AadT$C;S>YmZnqShX-Q9H^]rb8*EK\0SJ\b=gbK%-@KE<fi4*.AI\,H>h1)oiDS/W8`A+IIEh8eSdQ4EXDoc.bN@%`05HYAi"@B6pY`?9k``iZLm)KZQa33]'=bDh:<DG"N,qc!QY"[b%'J?-jVeBcTJ7WR1pOZsnLacNM\B1,5V2-7bU8<jeE%b<sh#LpmQDKLG<!JYYgQ5j?GJ(JWA#80J_&&_nH_b?Cg,sW9VYlCr,NWX+%7io<Fim@@\a`^F&Kd:4^:m*o4<AWA"!CKD=DGb4anL3ljB1LG<\Yp;Q30Fb>V49+hjeS!?Ted5dB1L-)ae@3q<dR?[3&tIrj/XUX%(G2EXpe\iZd5"HmVhJN).;):H3GFB0aYDc@BGi0L.ZMUseBq1>rNSo6-frS@!;##`U5*p/kbN`MPWqG!*r'um'g_mK7Eh'Z-KZ!B%$]U!g2K_=j*=^ufJ986:`jCoBio[p5fm_fLU`&'0)(\#+mGL+kgOrVUI@n=skZ(c5)ttY*j;m_=#s,''^>eO24?>cuPf]W`?3l-;%_hW+'hqkK9rqACYNA^8`7*14?pdce@9ua4l.;]'^+4L389t`<R#PY7?@e#VEpZU+>Bkk)hZs735G!e:+N`,W89IXhZmO[c8/KD(P%_.<TEpa&\UG6uHBa@i%l^!/=C`G)cJh8]>]]#Xqi?=E\Kp,IWEomPbr#$WLZN$_%UJF'Do*=p;<[4Y8K34rPO`)64u6Ko>pC-p5$%Z*WubS'U8^#/rmdgV^:cj)m8bS,;6tRf3m.c9[1G;e#'Q@[;*lY=Jft5JMI?R>Q7_rUsi09iel//Z$rRMRA+4gTH">LDP*AK;uD/%l(D<R8NsU(NA>P?B[;SW$..q-+Cai\q#0TQJ/)(]#V@qJ\=hhlcb#3sd:$lbfB6"oQeL?l^-,a.Y^g*^Spr47,_!fbjV)Zf;(>oE%idH6_O"-V==n6Rk2n=76<j0I+a:V]8XXL=%WnPS>ME;#a#:GIR=Q$F#[oFS0_8SKchua?QB8IP\rhQgdi4OmGQn[]T8/G4M,],pT%_+k?a;c8(4oV+nYUK)9+oa;ipGLk9E@*PV"Bq%jUMr;7XdlQ/=WpM&h+f5F,CE>/(BkVU2'jp+7Hf7=Q5Bn!>FM[FBNjs>22-7V1%K%SJf6^\a%%O;Le@\'8EW^u<cc?/J]C7Qjb#D22i$NJPc[]NuK-n_s+Je+\P;Cm@D1=:*!SW:m<]jj5VZG5c"1EMQpn=:$Q?T27D%(HY32['3AKheR(u"@)oMX5;.&eaX,sp=c7Sa8bYRo]e4J([@7(7BT[5.)h!en.(B?YWL/K)Lu#0.M6Z?h^.ua:XWoT/UJQAI*a95%$-ELc&cV<]i/a[T2d['KqB`?6aZuUd!oA%h_UER`$,M0T[bq!)8i@Vb'P'2+J*A"HT03m/;*2EBpj<MKM#fqMh\e_l&\rup:C>em%bJ7Eh-0Rf+3cdb@H7)r2'BM#Z[%]LQ?BuO*U8Q6LCQ,Gul:P!rLsGo+fdt\LbRcAVV;u+qF9sd2cs(P5XuX'kJ+.:F[^od>B!B20%g\'VjrG0H3j^tftmdPo/Tpt^e\Z1P[]B'9li0B&q_1V:,X5<j[=58/j~>%AI9_PrivateDataEnd